{
	"name": "eTax Proses 1 file",
	"properties": {
		"activities": [
			{
				"name": "Lookup CCAI NPWP",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "spCcaiNpwp_GetEntity",
						"storedProcedureParameters": {
							"TaxNumber": {
								"value": {
									"value": "@split(pipeline().parameters.sourceFile,'-')[0]",
									"type": "Expression"
								}
							}
						}
					},
					"dataset": {
						"referenceName": "GenericAzureSQLDatabase",
						"type": "DatasetReference",
						"parameters": {
							"table": "Configuration",
							"secret": "azure-sql-dev-core"
						}
					}
				}
			},
			{
				"name": "Lookup Invoice Info",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "spETax_GetInvoiceInfo",
						"storedProcedureParameters": {
							"TaxInvoice": {
								"value": {
									"value": "@split(pipeline().parameters.sourceFile,'-')[1]",
									"type": "Expression"
								}
							}
						}
					},
					"dataset": {
						"referenceName": "GenericAzureSQLDatabase",
						"type": "DatasetReference",
						"parameters": {
							"table": "Orders",
							"secret": "azure-sql-dev-sales"
						}
					}
				}
			},
			{
				"name": "Set entity",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup CCAI NPWP",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "Entity",
					"value": {
						"value": "@activity('Lookup CCAI NPWP').output.firstrow.Entity",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Lookup Customer Info",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set filename",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "spCustomer_GetEmailAndOperation",
						"storedProcedureParameters": {
							"CustomerNumber": {
								"value": {
									"value": "@activity('Lookup Invoice Info').output.firstrow.CustomerNumber",
									"type": "Expression"
								}
							}
						}
					},
					"dataset": {
						"referenceName": "GenericAzureSQLDatabase",
						"type": "DatasetReference",
						"parameters": {
							"table": "Orders",
							"secret": "azure-sql-dev-masterdata"
						}
					}
				}
			},
			{
				"name": "Create Log in SQL",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "spETaxFileLog_Insert",
					"storedProcedureParameters": {
						"CreatedBy": {
							"value": {
								"value": "@pipeline().TriggerName",
								"type": "Expression"
							},
							"type": "String"
						},
						"Filename": {
							"value": {
								"value": "@pipeline().parameters.sourceFile",
								"type": "Expression"
							},
							"type": "String"
						},
						"Status": {
							"value": {
								"value": "C",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "GenericAzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"Secret": "azure-sql-dev-core"
					}
				}
			},
			{
				"name": "Update if entity not found",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set entity",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "spETaxFileLog_Update",
					"storedProcedureParameters": {
						"Email": {
							"value": null,
							"type": "String"
						},
						"ErrorMessage": {
							"value": {
								"value": "Entity is not found",
								"type": "Expression"
							},
							"type": "String"
						},
						"Filename": {
							"value": {
								"value": "@pipeline().parameters.sourceFile",
								"type": "Expression"
							},
							"type": "String"
						},
						"Folder": {
							"value": {
								"value": "Inappropriate File",
								"type": "Expression"
							},
							"type": "String"
						},
						"LastUpdateBy": {
							"value": {
								"value": "@pipeline().TriggerName",
								"type": "Expression"
							},
							"type": "String"
						},
						"NewFilename": {
							"value": null,
							"type": "String"
						},
						"SentDate": {
							"value": null,
							"type": "DateTime"
						},
						"Status": {
							"value": {
								"value": "I",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "GenericAzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"Secret": "azure-sql-dev-core"
					}
				}
			},
			{
				"name": "Update if invoice info is not found",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set customer Number",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "spETaxFileLog_Update",
					"storedProcedureParameters": {
						"Email": {
							"value": null,
							"type": "String"
						},
						"ErrorMessage": {
							"value": {
								"value": "Invoice Info is not found",
								"type": "Expression"
							},
							"type": "String"
						},
						"Filename": {
							"value": {
								"value": "@pipeline().parameters.sourceFile",
								"type": "Expression"
							},
							"type": "String"
						},
						"Folder": {
							"value": {
								"value": "Inappropriate File",
								"type": "Expression"
							},
							"type": "String"
						},
						"LastUpdateBy": {
							"value": {
								"value": "@pipeline().TriggerName",
								"type": "Expression"
							},
							"type": "String"
						},
						"NewFilename": {
							"value": null,
							"type": "String"
						},
						"SentDate": {
							"value": null,
							"type": "DateTime"
						},
						"Status": {
							"value": {
								"value": "I",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "GenericAzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"Secret": "azure-sql-dev-core"
					}
				}
			},
			{
				"name": "Set customer Number",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup Invoice Info",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "CustomerNumber",
					"value": {
						"value": "@activity('Lookup Invoice Info').output.firstrow.CustomerNumber",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set filename",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set entity",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set customer Number",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "newFilename",
					"value": {
						"value": "@concat(variables('Entity'),'-',\nactivity('Lookup Invoice Info').output.firstrow.BillingDate,'-',\nactivity('Lookup Invoice Info').output.firstrow.CommercialInvoice,'-',\nactivity('Lookup Invoice Info').output.firstrow.CustomerNumber,'-',\nactivity('Lookup Invoice Info').output.firstrow.TaxInvoice,'.pdf')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set email message",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup Customer Info",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "emailMessage",
					"value": {
						"value": "@concat(\nactivity('Lookup Customer Info').output.firstrow.Email,'-',\nactivity('Lookup Customer Info').output.firstrow.Operation,'-',\nvariables('newFilename'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Update Log - To Be Sent",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set email message",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "spETaxFileLog_Update",
					"storedProcedureParameters": {
						"Email": {
							"value": {
								"value": "@activity('Lookup Customer Info').output.firstrow.Email",
								"type": "Expression"
							},
							"type": "String"
						},
						"ErrorMessage": {
							"value": null,
							"type": "String"
						},
						"Filename": {
							"value": {
								"value": "@pipeline().parameters.sourceFile",
								"type": "Expression"
							},
							"type": "String"
						},
						"Folder": {
							"value": {
								"value": "To be Sent",
								"type": "Expression"
							},
							"type": "String"
						},
						"LastUpdateBy": {
							"value": {
								"value": "@pipeline().TriggerName",
								"type": "Expression"
							},
							"type": "String"
						},
						"NewFilename": {
							"value": {
								"value": "@variables('newFilename')",
								"type": "Expression"
							},
							"type": "String"
						},
						"SentDate": {
							"value": null,
							"type": "DateTime"
						},
						"Status": {
							"value": {
								"value": "T",
								"type": "Expression"
							},
							"type": "String"
						},
						"EmailMessage": {
							"value": {
								"value": "@variables('emailMessage')",
								"type": "Expression"
							},
							"type": "String"
						},
						"Operation": {
							"value": {
								"value": "@activity('Lookup Customer Info').output.firstrow.Operation",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "GenericAzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"Secret": "azure-sql-dev-core"
					}
				}
			},
			{
				"name": "Exe Pipeline - Move to inappropriate file_copy1",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Update if invoice info is not found",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Copy or Move File",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"sourceDirectory": {
							"value": "@pipeline().parameters.sourceDirectory",
							"type": "Expression"
						},
						"sourceFilename": {
							"value": "@pipeline().parameters.sourceFile",
							"type": "Expression"
						},
						"targetDirectory": {
							"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
							"type": "Expression"
						},
						"targetFilename": {
							"value": "@pipeline().parameters.sourceFile",
							"type": "Expression"
						},
						"isMove": "true"
					}
				}
			},
			{
				"name": "Exe Pipeline - Move to inappropriate file_copy2",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Update if entity not found",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Copy or Move File",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"sourceDirectory": {
							"value": "@pipeline().parameters.sourceDirectory",
							"type": "Expression"
						},
						"sourceFilename": {
							"value": "@pipeline().parameters.sourceFile",
							"type": "Expression"
						},
						"targetDirectory": {
							"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
							"type": "Expression"
						},
						"targetFilename": {
							"value": "@pipeline().parameters.sourceFile",
							"type": "Expression"
						},
						"isMove": "true"
					}
				}
			},
			{
				"name": "Exe Pipeline - Move to To Be Sent",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Update Log - To Be Sent",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Copy or Move File",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"sourceDirectory": {
							"value": "@pipeline().parameters.sourceDirectory",
							"type": "Expression"
						},
						"sourceFilename": {
							"value": "@pipeline().parameters.sourceFile",
							"type": "Expression"
						},
						"targetDirectory": {
							"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
							"type": "Expression"
						},
						"targetFilename": {
							"value": "@variables('newFilename')",
							"type": "Expression"
						},
						"isMove": "true"
					}
				}
			},
			{
				"name": "Update if customer info is not found",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set email message",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "spETaxFileLog_Update",
					"storedProcedureParameters": {
						"Email": {
							"value": null,
							"type": "String"
						},
						"ErrorMessage": {
							"value": {
								"value": "Customer Info is not found",
								"type": "Expression"
							},
							"type": "String"
						},
						"Filename": {
							"value": {
								"value": "@pipeline().parameters.sourceFile",
								"type": "Expression"
							},
							"type": "String"
						},
						"Folder": {
							"value": {
								"value": "Inappropriate File",
								"type": "Expression"
							},
							"type": "String"
						},
						"LastUpdateBy": {
							"value": {
								"value": "@pipeline().TriggerName",
								"type": "Expression"
							},
							"type": "String"
						},
						"NewFilename": {
							"value": null,
							"type": "String"
						},
						"SentDate": {
							"value": null,
							"type": "DateTime"
						},
						"Status": {
							"value": {
								"value": "I",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "GenericAzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"Secret": "azure-sql-dev-core"
					}
				}
			},
			{
				"name": "Exe Pipeline - Move to inappropriate file_copy1_copy1",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Update if customer info is not found",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Copy or Move File",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"sourceDirectory": {
							"value": "@pipeline().parameters.sourceDirectory",
							"type": "Expression"
						},
						"sourceFilename": {
							"value": "@pipeline().parameters.sourceFile",
							"type": "Expression"
						},
						"targetDirectory": {
							"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
							"type": "Expression"
						},
						"targetFilename": {
							"value": "@pipeline().parameters.sourceFile",
							"type": "Expression"
						},
						"isMove": "true"
					}
				}
			},
			{
				"name": "Web1",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Exe Pipeline - Move to To Be Sent",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": []
			}
		],
		"parameters": {
			"sourceDirectory": {
				"type": "string",
				"defaultValue": "/dev/Pdf"
			},
			"sourceFile": {
				"type": "string",
				"defaultValue": "010706570201001-0100021927344922-031207392211000-20190731112502.pdf"
			}
		},
		"variables": {
			"TaxNumber": {
				"type": "String"
			},
			"Entity": {
				"type": "String"
			},
			"CustomerNumber": {
				"type": "String"
			},
			"newFilename": {
				"type": "String"
			},
			"emailMessage": {
				"type": "String"
			}
		},
		"annotations": []
	}
}