{
	"name": "OLD eTax 2 Proses 1 file",
	"properties": {
		"activities": [
			{
				"name": "Lookup CCAI NPWP",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "spCcaiNpwp_GetEntity",
						"storedProcedureParameters": {
							"TaxNumber": {
								"value": {
									"value": "@split(pipeline().parameters.sourceFile,'-')[0]",
									"type": "Expression"
								}
							}
						}
					},
					"dataset": {
						"referenceName": "GenericAzureSQLDatabase",
						"type": "DatasetReference",
						"parameters": {
							"table": "Configuration",
							"secret": {
								"value": "@pipeline().parameters.secretCore",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Lookup Invoice Info",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "spETax_GetInvoiceInfo",
						"storedProcedureParameters": {
							"TaxInvoice": {
								"value": {
									"value": "@split(pipeline().parameters.sourceFile,'-')[1]",
									"type": "Expression"
								}
							}
						}
					},
					"dataset": {
						"referenceName": "GenericAzureSQLDatabase",
						"type": "DatasetReference",
						"parameters": {
							"table": "Orders",
							"secret": {
								"value": "@pipeline().parameters.secretSales",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "If Invoice Info is found",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Lookup Invoice Info",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(activity('Lookup Invoice Info').output,'firstrow')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Exe Pipeline - Move to inappropriate file_copy1",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "Copy or Move File idcbtap22",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"sourceDirectory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									},
									"sourceFilename": {
										"value": "@pipeline().parameters.sourceFile",
										"type": "Expression"
									},
									"targetDirectory": {
										"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
										"type": "Expression"
									},
									"targetFilename": {
										"value": "@pipeline().parameters.sourceFile",
										"type": "Expression"
									},
									"isMove": "true"
								}
							}
						},
						{
							"name": "Update if invoice info not found",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Exe Pipeline - Move to inappropriate file_copy1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "spETaxFileLog_Error",
								"storedProcedureParameters": {
									"Error": {
										"value": {
											"value": "Invoice is not found",
											"type": "Expression"
										},
										"type": "String"
									},
									"Filename": {
										"value": {
											"value": "@pipeline().parameters.sourceFile",
											"type": "Expression"
										},
										"type": "String"
									},
									"Folder": {
										"value": {
											"value": "Inappropriate File",
											"type": "Expression"
										},
										"type": "String"
									},
									"LastUpdateBy": {
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										},
										"type": "String"
									},
									"NewFilename": {
										"value": null,
										"type": "String"
									},
									"Status": {
										"value": {
											"value": "I",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "GenericAzureSqlDatabase",
								"type": "LinkedServiceReference",
								"parameters": {
									"Secret": {
										"value": "@pipeline().parameters.secretCore",
										"type": "Expression"
									}
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set Customer Number",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "CustomerNumber",
								"value": {
									"value": "@activity('Lookup Invoice Info').output.firstrow.CustomerNumber",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set Invoice Date",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set Customer Number",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "InvoiceDate",
								"value": {
									"value": "@activity('Lookup Invoice Info').output.firstrow.BillingDate",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set Invoice Number",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set Invoice Date",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "InvoiceNumber",
								"value": {
									"value": "@activity('Lookup Invoice Info').output.firstrow.CommercialInvoice",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set Tax Number",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set Invoice Number",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "TaxNumber",
								"value": {
									"value": "@activity('Lookup Invoice Info').output.firstrow.TaxInvoice",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "If entity found",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Lookup CCAI NPWP",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(activity('Lookup CCAI NPWP').output,'firstrow')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Update if entity not found",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Exe Pipeline - Move to inappropriate file_copy2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "spETaxFileLog_Error",
								"storedProcedureParameters": {
									"Error": {
										"value": {
											"value": "Entity is not found",
											"type": "Expression"
										},
										"type": "String"
									},
									"Filename": {
										"value": {
											"value": "@pipeline().parameters.sourceFile",
											"type": "Expression"
										},
										"type": "String"
									},
									"Folder": {
										"value": {
											"value": "Inappropriate File",
											"type": "Expression"
										},
										"type": "String"
									},
									"LastUpdateBy": {
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										},
										"type": "String"
									},
									"NewFilename": {
										"value": null,
										"type": "String"
									},
									"Status": {
										"value": {
											"value": "I",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "GenericAzureSqlDatabase",
								"type": "LinkedServiceReference",
								"parameters": {
									"Secret": {
										"value": "@pipeline().parameters.secretCore",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Exe Pipeline - Move to inappropriate file_copy2",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "Copy or Move File idcbtap22",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"sourceDirectory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									},
									"sourceFilename": {
										"value": "@pipeline().parameters.sourceFile",
										"type": "Expression"
									},
									"targetDirectory": {
										"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
										"type": "Expression"
									},
									"targetFilename": {
										"value": "@pipeline().parameters.sourceFile",
										"type": "Expression"
									},
									"isMove": "true"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set entity",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "Entity",
								"value": {
									"value": "@activity('Lookup CCAI NPWP').output.firstrow.Entity",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "If entity and invoice is found",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If entity found",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "If Invoice Info is found",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(not(equals(variables('Entity'),'')),not(equals(variables('InvoiceNumber'),'')))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Set filename",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "newFilename",
								"value": {
									"value": "@concat(variables('Entity'),'-',\nvariables('InvoiceDate'),'-',\nvariables('InvoiceNumber'),'-',\nvariables('CustomerNumber'),'-',\nvariables('TaxNumber'),'.pdf')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Update Log - To Be Sent",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Exe Pipeline - Move to To Be Sent",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "spETaxFileLog_ToBeSent",
								"storedProcedureParameters": {
									"CustomerNumber": {
										"value": {
											"value": "@variables('CustomerNumber')",
											"type": "Expression"
										},
										"type": "String"
									},
									"Filename": {
										"value": {
											"value": "@pipeline().parameters.sourceFile",
											"type": "Expression"
										},
										"type": "String"
									},
									"LastUpdateBy": {
										"value": {
											"value": "@pipeline().TriggerName",
											"type": "Expression"
										},
										"type": "String"
									},
									"NewFilename": {
										"value": {
											"value": "@variables('newFilename')",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "GenericAzureSqlDatabase",
								"type": "LinkedServiceReference",
								"parameters": {
									"Secret": {
										"value": "@pipeline().parameters.secretCore",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Exe Pipeline - Move to To Be Sent",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Set filename",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "Copy or Move File idcbtap22",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"sourceDirectory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									},
									"sourceFilename": {
										"value": "@pipeline().parameters.sourceFile",
										"type": "Expression"
									},
									"targetDirectory": {
										"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
										"type": "Expression"
									},
									"targetFilename": {
										"value": "@variables('newFilename')",
										"type": "Expression"
									},
									"isMove": "true"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"sourceDirectory": {
				"type": "string",
				"defaultValue": "/dev/Pdf"
			},
			"sourceFile": {
				"type": "string",
				"defaultValue": "010706570201001-0100021927344922-031207392211000-20190731112502.pdf"
			},
			"secretCore": {
				"type": "string",
				"defaultValue": "azure-sql-prd-core"
			},
			"secretSales": {
				"type": "string",
				"defaultValue": "azure-sql-prd-sales"
			}
		},
		"variables": {
			"TaxNumber": {
				"type": "String"
			},
			"Entity": {
				"type": "String"
			},
			"CustomerNumber": {
				"type": "String"
			},
			"newFilename": {
				"type": "String"
			},
			"emailMessage": {
				"type": "String"
			},
			"InvoiceDate": {
				"type": "String"
			},
			"InvoiceNumber": {
				"type": "String"
			}
		},
		"folder": {
			"name": "eTAX"
		},
		"annotations": []
	}
}