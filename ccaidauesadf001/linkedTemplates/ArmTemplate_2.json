{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ccaidauesadf001"
		},
		"DMS_properties_Blob to SQL_parameters_sourceContainer": {
			"type": "string",
			"defaultValue": "dms"
		},
		"DMS_properties_Blob to SQL_parameters_sourceFolder": {
			"type": "string",
			"defaultValue": "Unprocessed"
		},
		"DMS_properties_Blob to SQL_parameters_backupFolder": {
			"type": "string",
			"defaultValue": "History"
		},
		"DMS_properties_Blob to SQL_parameters_Filename": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"DMS_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/3a0d9281-1840-4a66-bbc8-86c1720ee7bc/resourceGroups/ccaidauessharedrsg/providers/Microsoft.Storage/storageAccounts/ccaidauesdevadf001str"
		},
		"Daily Run Trigger - 1 am _ 1 pm_properties_Integration Run SP_parameters_triggerGroup": {
			"type": "string",
			"defaultValue": "D-1;13"
		},
		"Purging Data_properties_Integration Run SP_parameters_triggerGroup": {
			"type": "string",
			"defaultValue": "Purging"
		},
		"Survey To Flat Table - 2 am_properties_Integration Run SP_parameters_triggerGroup": {
			"type": "string",
			"defaultValue": "Survey"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Copy CSV to SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy CSV (Zipped) to SQL from blob storage",
				"activities": [
					{
						"name": "If file zipped",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.isZipped",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy csv to sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{if(pipeline().parameters.isTruncate,concat('IF OBJECT_ID (N''',pipeline().parameters.staggingTable,''', N''U'') IS NOT NULL TRUNCATE TABLE ',pipeline().parameters.staggingTable),'')}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "CsvFile",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.file",
													"type": "Expression"
												},
												"deliminator": {
													"value": "@pipeline().parameters.deliminator",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@pipeline().parameters.staggingTable",
													"type": "Expression"
												},
												"secret": {
													"value": "@pipeline().parameters.secret",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy zip to sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{if(pipeline().parameters.isTruncate,concat('IF OBJECT_ID (N''',pipeline().parameters.staggingTable,''', N''U'') IS NOT NULL TRUNCATE TABLE ',pipeline().parameters.staggingTable),'')}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ZipFile",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.file",
													"type": "Expression"
												},
												"deliminator": {
													"value": "@pipeline().parameters.deliminator",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@pipeline().parameters.staggingTable",
													"type": "Expression"
												},
												"secret": {
													"value": "@pipeline().parameters.secret",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					},
					"staggingTable": {
						"type": "string"
					},
					"secret": {
						"type": "string"
					},
					"isTruncate": {
						"type": "bool"
					},
					"isZipped": {
						"type": "bool"
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy SQL to SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch is source Type and target table exists",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Target Database Type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@concat(pipeline().parameters.sourceDbType,'-',pipeline().parameters.sourceDbType,'-',variables('isExists'))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "PaaS-PaaS-True",
									"activities": [
										{
											"name": "Copy PaaS to PaaS w Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "AzureSqlSink",
													"preCopyScript": {
														"value": "@{concat('TRUNCATE TABLE ', pipeline().parameters.targetTable)}",
														"type": "Expression"
													},
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "PaaS-PaaS-False",
									"activities": [
										{
											"name": "Copy PaaS to PaaS wo Truncate",
											"description": "Copy without truncate first",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "AzureSqlSink",
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-PaaS-True",
									"activities": [
										{
											"name": "Copy IaaS to PaaS w Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "AzureSqlSink",
													"preCopyScript": {
														"value": "@{concat('TRUNCATE TABLE ', pipeline().parameters.targetTable)}",
														"type": "Expression"
													},
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-PaaS-False",
									"activities": [
										{
											"name": "Copy IaaS to PaaS wo Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "AzureSqlSink",
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-IaaS-True",
									"activities": [
										{
											"name": "Copy IaaS to IaaS w Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "SqlServerSink",
													"preCopyScript": {
														"value": "@{concat('TRUNCATE TABLE ', pipeline().parameters.targetTable)}",
														"type": "Expression"
													},
													"tableOption": "autoCreate"
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-IaaS-False",
									"activities": [
										{
											"name": "Copy IaaS to IaaS wo Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "SqlServerSink",
													"tableOption": "autoCreate"
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					},
					{
						"name": "Target Database Type",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.targetDbType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "PaaS",
									"activities": [
										{
											"name": "Check IsExists Target Table PaaS",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"exists"
												]
											}
										},
										{
											"name": "Set isExists PaaS",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Check IsExists Target Table PaaS",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "isExists",
												"value": {
													"value": "@string(activity('Check IsExists Target Table PaaS').output.exists)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "IaaS",
									"activities": [
										{
											"name": "Check IsExists Target Table IaaS",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"exists"
												]
											}
										},
										{
											"name": "Set isExists IaaS",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Check IsExists Target Table IaaS",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "isExists",
												"value": {
													"value": "@string(activity('Check IsExists Target Table IaaS').output.exists)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"sourceSecret": {
						"type": "string"
					},
					"sourceTable": {
						"type": "string"
					},
					"sourceDbType": {
						"type": "string",
						"defaultValue": "PaaS"
					},
					"targetSecret": {
						"type": "string"
					},
					"targetTable": {
						"type": "string"
					},
					"targetDbType": {
						"type": "string",
						"defaultValue": "PaaS"
					}
				},
				"variables": {
					"isExists": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy or Move File idcbtap22')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to target",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.sourceFilename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.targetDirectory",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.targetFilename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "If isMove then delete source file",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy data to target",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.isMove",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete source file",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "File_in_idcbtap22",
											"type": "DatasetReference",
											"parameters": {
												"directory": {
													"value": "@pipeline().parameters.sourceDirectory",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.sourceFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"sourceDirectory": {
						"type": "string"
					},
					"sourceFilename": {
						"type": "string"
					},
					"targetDirectory": {
						"type": "string"
					},
					"targetFilename": {
						"type": "string"
					},
					"isMove": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy or Move in Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy CSV (Zipped) to SQL from blob storage",
				"activities": [
					{
						"name": "Copy Blob to Success folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FileInBlob_message",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.sourceFile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FileInBlob_message",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.targetDirectory",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.targetFile",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "If isMove then delete source file",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy Blob to Success folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.isMove",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete source file",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileInBlob_message",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceDirectory",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"container": {
						"type": "string"
					},
					"sourceDirectory": {
						"type": "string"
					},
					"sourceFile": {
						"type": "string"
					},
					"targetDirectory": {
						"type": "string"
					},
					"targetFile": {
						"type": "string"
					},
					"isMove": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FTP DMS to Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy to blob storage",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "SftpReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SFTP_DMS",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.sourceFolder",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.sourceFilename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FileInBlob_adf_dev",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.targetContainer",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.targetFolder",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.sourceFilename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"targetContainer": {
						"type": "string",
						"defaultValue": "dms"
					},
					"targetFolder": {
						"type": "string",
						"defaultValue": "Unprocessed"
					},
					"sourceFolder": {
						"type": "string",
						"defaultValue": "/ToBasis-Dev"
					},
					"sourceFilename": {
						"type": "string",
						"defaultValue": "ScanOutletBarcode_20200213.zip"
					}
				},
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Filename')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of File",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SFTP_DMS",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "ToBasis",
										"type": "Expression"
									},
									"filename": {
										"value": "LoginUser.zip",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "SftpReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Filter File only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get List of File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of File').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"directory": {
						"type": "string",
						"defaultValue": "VAT Output 2\\VAT Output 3"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Integration Run SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get Table to copy",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "spIntegration_SPConfigurations",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"TriggerGroup": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.triggerGroup",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": {
										"value": "IntegrationSPConfigurations",
										"type": "Expression"
									},
									"secret": {
										"value": "@variables('secretConfiguration')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get Table to copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get Table to copy').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Run SQL SP",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Call Store Procedure",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"secret": {
												"value": "@item().SecretDatabase",
												"type": "Expression"
											},
											"storeprocedure": {
												"value": "@item().StoreProcedureProcess",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Send Email success",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Run SQL SP",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('Integration SUCCESS -  [', pipeline().RunId,'] - ', item().StoreProcedureProcess, ' is success')",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This Integration ', item().StoreProcedureProcess, ' is success')",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								},
								{
									"name": "Execute Send Email fail to copy",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Run SQL SP",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('Integration Run SP - FAILED - [', pipeline().RunId,'] - ', item().StoreProcedureProcess, ' is error when run store procedure')",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This Integration run SP ', item().StoreProcedureProcess, ' is failed')",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"triggerGroup": {
						"type": "string"
					}
				},
				"variables": {
					"secretConfiguration": {
						"type": "String",
						"defaultValue": "azure-sql-prd-report"
					},
					"emailFrom": {
						"type": "String",
						"defaultValue": "idn.adf.ReportIntegration@ccamatil.com"
					},
					"emailTo": {
						"type": "String",
						"defaultValue": "andreas.herrinto@ccamatil.com"
					},
					"emailCc": {
						"type": "String",
						"defaultValue": "siska.limanto@ccamatil.com"
					},
					"emailBcc": {
						"type": "String"
					},
					"emailQueue": {
						"type": "String",
						"defaultValue": "664CDAFA44B642DDB511046AFC2C732A"
					}
				},
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Integration SQL to FTP DMS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy PaaS to PaaS w Truncate",
						"description": "Truncate before copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@CONCAT('SELECT ArticlePrices.* FROM ',pipeline().parameters.sourceTable, ' ArticlePrices')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": true
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": {
										"value": "@pipeline().parameters.sourceTable",
										"type": "Expression"
									},
									"secret": {
										"value": "@pipeline().parameters.sourceSecret",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZipInSFTP",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.targetFolder",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.targetFilename",
										"type": "Expression"
									},
									"column_deliminator": {
										"value": "@pipeline().parameters.deliminator",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"sourceSecret": {
						"type": "string",
						"defaultValue": "azure-sql-dev-masterdata"
					},
					"sourceTable": {
						"type": "string",
						"defaultValue": "vwCoreToDMS_GetArticlePricingMaster"
					},
					"targetFolder": {
						"type": "string",
						"defaultValue": "/FromBasis-Dev"
					},
					"targetFilename": {
						"type": "string",
						"defaultValue": "ArticlePrices_ADF.zip"
					},
					"deliminator": {
						"type": "string",
						"defaultValue": "|"
					}
				},
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OHS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Send User Gps",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "SftpReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('TRUNCATE TABLE ', variables('TargetSendGps'))}",
									"type": "Expression"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ZipInSFTP",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@variables('SFTP_Folder')",
										"type": "Expression"
									},
									"filename": {
										"value": "@variables('SFTP_Filename')",
										"type": "Expression"
									},
									"column_deliminator": {
										"value": "|",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "GenericSqlServer_CCAIDWPRDB004",
								"type": "DatasetReference",
								"parameters": {
									"secret": {
										"value": "@variables('secret_bi_db')",
										"type": "Expression"
									},
									"table": {
										"value": "@variables('TargetSendGps')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy Ride",
						"description": "Copy from Survey Database to BI Database",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('TRUNCATE TABLE ', variables('TargetRideMe'))}",
									"type": "Expression"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": {
										"value": "@variables('SourceRideMe')",
										"type": "Expression"
									},
									"secret": {
										"value": "@variables('secret_survey_db')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "GenericSqlServer_CCAIDWPRDB004",
								"type": "DatasetReference",
								"parameters": {
									"secret": {
										"value": "@variables('secret_bi_db')",
										"type": "Expression"
									},
									"table": {
										"value": "@variables('TargetRideMe')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"variables": {
					"secret_bi_db": {
						"type": "String",
						"defaultValue": "onprem-sql-prd-bi"
					},
					"secret_survey_db": {
						"type": "String",
						"defaultValue": "azure-sql-prd-survey"
					},
					"TargetSendGps": {
						"type": "String",
						"defaultValue": "HR_TMP_OHSSpeed_Send_User_GPS"
					},
					"TargetRideMe": {
						"type": "String",
						"defaultValue": "HR_TMP_OHS_SalesRpt_Survey"
					},
					"SFTP_Folder": {
						"type": "String",
						"defaultValue": "/ToBasis"
					},
					"SFTP_Filename": {
						"type": "String",
						"defaultValue": "SendUserGps.zip"
					},
					"SourceRideMe": {
						"type": "String",
						"defaultValue": "vwADF_RideMeSurvey"
					},
					"backupContainer": {
						"type": "String",
						"defaultValue": "dms"
					},
					"backupFolder": {
						"type": "String",
						"defaultValue": "Unprocessed"
					}
				},
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Data SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get Table to copy Sequence",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "spIntegration_Configurations",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"TriggerGroup": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerGroup",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": {
										"value": "IntegrationConfigurations",
										"type": "Expression"
									},
									"secret": {
										"value": "@variables('secretConfiguration')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get Table to copy Sequence",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get Table to copy Sequence').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Copy SQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy SQL to SQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceSecret": {
												"value": "@item().SourceSecret",
												"type": "Expression"
											},
											"sourceTable": {
												"value": "@item().SourceTable",
												"type": "Expression"
											},
											"sourceDbType": {
												"value": "@item().SourceDatabaseType",
												"type": "Expression"
											},
											"targetSecret": {
												"value": "@item().TargetSecret",
												"type": "Expression"
											},
											"targetTable": {
												"value": "@item().TargetTable",
												"type": "Expression"
											},
											"targetDbType": {
												"value": "@item().TargetDatabaseType",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Send Email fail to copy",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Copy SQL",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('Integration FAILED - [', pipeline().RunId,'] - ', item().SourceTable, ' is error when copy file')",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This Integration when copy from ', item().SourceTable, ' into ', item().TargetTable)",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								},
								{
									"name": "If Store Procedure is not blank",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Execute Copy SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(item().StoreProcedureProcess,''))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Proses data after copy",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@item().StoreProcedureProcess",
														"type": "Expression"
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": {
															"value": "@item().TargetSecret",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute Send Email success",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Proses data after copy",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Sending Email",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"from": {
															"value": "@variables('emailFrom')",
															"type": "Expression"
														},
														"to": {
															"value": "@variables('emailTo')",
															"type": "Expression"
														},
														"message_id": {
															"value": "@guid()",
															"type": "Expression"
														},
														"subject": {
															"value": "@concat('SUCCESS - [', pipeline().RunId,'] - Integration ', item().SourceTable, ' is success')",
															"type": "Expression"
														},
														"content": {
															"value": "@concat('Hi, This Integration ', item().SourceTable, ' is success')",
															"type": "Expression"
														},
														"Queue_id": {
															"value": "@variables('emailQueue')",
															"type": "Expression"
														},
														"cc": {
															"value": "@variables('emailCc')",
															"type": "Expression"
														},
														"bcc": {
															"value": "@variables('emailBcc')",
															"type": "Expression"
														},
														"attachments": " "
													}
												}
											},
											{
												"name": "Execute Send Email fail to process",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Proses data after copy",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Sending Email",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"from": {
															"value": "@variables('emailFrom')",
															"type": "Expression"
														},
														"to": {
															"value": "@variables('emailTo')",
															"type": "Expression"
														},
														"message_id": {
															"value": "@guid()",
															"type": "Expression"
														},
														"subject": {
															"value": "@concat('FAILED - [', pipeline().RunId,'] - Integration ', item().SourceTable, ' is failed when process ', item().StoreProcedureProcess)",
															"type": "Expression"
														},
														"content": {
															"value": "@concat('Hi, This Integration ', item().SourceTable, ' is fail Due to <br />',activity('Proses data after copy').error.message)",
															"type": "Expression"
														},
														"Queue_id": {
															"value": "@variables('emailQueue')",
															"type": "Expression"
														},
														"cc": {
															"value": "@variables('emailCc')",
															"type": "Expression"
														},
														"bcc": {
															"value": "@variables('emailBcc')",
															"type": "Expression"
														},
														"attachments": " "
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"TriggerGroup": {
						"type": "string"
					}
				},
				"variables": {
					"secretConfiguration": {
						"type": "String",
						"defaultValue": "azure-sql-prd-report"
					},
					"emailTo": {
						"type": "String",
						"defaultValue": "andreas.herrinto@ccamatil.com"
					},
					"emailCc": {
						"type": "String"
					},
					"emailBcc": {
						"type": "String"
					},
					"emailFrom": {
						"type": "String",
						"defaultValue": "idn.adf.ReportIntegration@ccamatil.com"
					},
					"emailQueue": {
						"type": "String",
						"defaultValue": "664CDAFA44B642DDB511046AFC2C732A"
					}
				},
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy SQL to SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OLD eTax 2 Proses 1 file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup CCAI NPWP",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "spCcaiNpwp_GetEntity",
								"storedProcedureParameters": {
									"TaxNumber": {
										"value": {
											"value": "@split(pipeline().parameters.sourceFile,'-')[0]",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "Configuration",
									"secret": {
										"value": "@pipeline().parameters.secretCore",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Lookup Invoice Info",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "spETax_GetInvoiceInfo",
								"storedProcedureParameters": {
									"TaxInvoice": {
										"value": {
											"value": "@split(pipeline().parameters.sourceFile,'-')[1]",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "Orders",
									"secret": {
										"value": "@pipeline().parameters.secretSales",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "If Invoice Info is found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Invoice Info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Lookup Invoice Info').output,'firstrow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Exe Pipeline - Move to inappropriate file_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"isMove": true
										}
									}
								},
								{
									"name": "Update if invoice info not found",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to inappropriate file_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Error",
										"storedProcedureParameters": {
											"Error": {
												"value": {
													"value": "Invoice is not found",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"Folder": {
												"value": {
													"value": "Inappropriate File",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "I",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@pipeline().parameters.secretCore",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set Customer Number",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CustomerNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.CustomerNumber",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Invoice Date",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Customer Number",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "InvoiceDate",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.BillingDate",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Invoice Number",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Invoice Date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "InvoiceNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.CommercialInvoice",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Tax Number",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Invoice Number",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaxNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.TaxInvoice",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If entity found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup CCAI NPWP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Lookup CCAI NPWP').output,'firstrow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update if entity not found",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to inappropriate file_copy2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Error",
										"storedProcedureParameters": {
											"Error": {
												"value": {
													"value": "Entity is not found",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"Folder": {
												"value": {
													"value": "Inappropriate File",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "I",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@pipeline().parameters.secretCore",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Exe Pipeline - Move to inappropriate file_copy2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"isMove": true
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set entity",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Entity",
										"value": {
											"value": "@activity('Lookup CCAI NPWP').output.firstrow.Entity",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If entity and invoice is found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If entity found",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If Invoice Info is found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(not(equals(variables('Entity'),'')),not(equals(variables('InvoiceNumber'),'')))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set filename",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "newFilename",
										"value": {
											"value": "@concat(variables('Entity'),'-',\nvariables('InvoiceDate'),'-',\nvariables('InvoiceNumber'),'-',\nvariables('CustomerNumber'),'-',\nvariables('TaxNumber'),'.pdf')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Update Log - To Be Sent",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to To Be Sent",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_ToBeSent",
										"storedProcedureParameters": {
											"CustomerNumber": {
												"value": {
													"value": "@variables('CustomerNumber')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": {
													"value": "@variables('newFilename')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@pipeline().parameters.secretCore",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Exe Pipeline - Move to To Be Sent",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@variables('newFilename')",
												"type": "Expression"
											},
											"isMove": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "/dev/Pdf"
					},
					"sourceFile": {
						"type": "string",
						"defaultValue": "010706570201001-0100021927344922-031207392211000-20190731112502.pdf"
					},
					"secretCore": {
						"type": "string",
						"defaultValue": "azure-sql-prd-core"
					},
					"secretSales": {
						"type": "string",
						"defaultValue": "azure-sql-prd-sales"
					}
				},
				"variables": {
					"TaxNumber": {
						"type": "String"
					},
					"Entity": {
						"type": "String"
					},
					"CustomerNumber": {
						"type": "String"
					},
					"newFilename": {
						"type": "String"
					},
					"emailMessage": {
						"type": "String"
					},
					"InvoiceDate": {
						"type": "String"
					},
					"InvoiceNumber": {
						"type": "String"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OLD eTax 3 Send Email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pdfs in To Be Sent",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
										"type": "Expression"
									},
									"filename": "*.pdf"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Generate Message ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File only').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Lookup Customer Info",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "spCustomer_GetEmailAndOperation",
											"storedProcedureParameters": {
												"CustomerNumber": {
													"value": {
														"value": "@split(item().name,'-')[3]",
														"type": "Expression"
													}
												}
											}
										},
										"dataset": {
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": "Customers",
												"secret": {
													"value": "@pipeline().parameters.secretMasterData",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "If Customer Info is found",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup Customer Info",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(activity('Lookup Customer Info').output,'firstrow')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Update if customer info is not found",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to inappropriate file_copy1_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_Error",
													"storedProcedureParameters": {
														"Error": {
															"value": {
																"value": "Customer Master is not found",
																"type": "Expression"
															},
															"type": "String"
														},
														"Filename": {
															"value": null,
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "Inappropriate File",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"NewFilename": {
															"value": {
																"value": "@item().name",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "I",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": {
															"value": "@pipeline().parameters.secretCore",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Exe Pipeline - Move to inappropriate file_copy1_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"isMove": true
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Exe Pipeline - Move to Processing",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Copy Blob attachment",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sending')",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Get Message ID",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderStoredProcedureName": "[[dbo].[spETaxFileLog_GenerateMessageId]",
														"storedProcedureParameters": {
															"CustomerNumber": {
																"type": "String",
																"value": {
																	"value": "@activity('Lookup Customer Info').output.firstrow.CustomerNumber",
																	"type": "Expression"
																}
															},
															"Email": {
																"type": "String",
																"value": {
																	"value": "@activity('Lookup Customer Info').output.firstrow.Email",
																	"type": "Expression"
																}
															},
															"NewFilename": {
																"type": "String",
																"value": {
																	"value": "@item().name",
																	"type": "Expression"
																}
															},
															"Operation": {
																"type": "String",
																"value": {
																	"value": "@activity('Lookup Customer Info').output.firstrow.Operation",
																	"type": "Expression"
																}
															}
														},
														"queryTimeout": "02:00:00"
													},
													"dataset": {
														"referenceName": "GenericAzureSQLDatabase",
														"type": "DatasetReference",
														"parameters": {
															"table": "eTaxFileLog",
															"secret": {
																"value": "@pipeline().parameters.secretCore",
																"type": "Expression"
															}
														}
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Copy Blob attachment",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Get Message ID",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": true
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "File_in_idcbtap22",
														"type": "DatasetReference",
														"parameters": {
															"directory": {
																"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
																"type": "Expression"
															},
															"filename": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "FileInBlob_message",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@variables('BlobContainer')",
																"type": "Expression"
															},
															"directory": {
																"value": "@concat(variables('BlobFolderAttachment'),activity('Get Message ID').output.firstrow.MessageID)",
																"type": "Expression"
															},
															"file": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter File only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Pdfs in To Be Sent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Pdfs in To Be Sent').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get JSON Message",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Generate Message ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spETaxFileLog_PostMessage]",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "eTaxFileLog",
									"secret": {
										"value": "@pipeline().parameters.secretCore",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Message id",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get JSON Message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get JSON Message').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If email valid",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@item().isEmailValid",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Sending Email",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Sending Email",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"from": {
															"value": "@pipeline().parameters.From",
															"type": "Expression"
														},
														"to": {
															"value": "@item().Email",
															"type": "Expression"
														},
														"message_id": {
															"value": "@item().Messageid",
															"type": "Expression"
														},
														"subject": {
															"value": "@concat(variables('Subject'),' ',formatDateTime(item().SentDate,'MMM yyyy'), ' ', item().Messageid)",
															"type": "Expression"
														},
														"content": {
															"value": "@variables('Content')",
															"type": "Expression"
														},
														"Queue_id": {
															"value": "@pipeline().parameters.queue",
															"type": "Expression"
														},
														"cc": {
															"value": "@variables('cc')",
															"type": "Expression"
														},
														"bcc": {
															"value": "@variables('bcc')",
															"type": "Expression"
														},
														"attachments": {
															"value": "@item().Attachment",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "VAT Output 2\\VAT Output 3"
					},
					"secretCore": {
						"type": "string",
						"defaultValue": "azure-sql-prd-core"
					},
					"secretMasterData": {
						"type": "string",
						"defaultValue": "azure-sql-prd-masterdata"
					},
					"From": {
						"type": "string",
						"defaultValue": "idn.vatoutput@ccamatil.com"
					},
					"queue": {
						"type": "string",
						"defaultValue": "A140452BD16743979AC6058E79BC85A3"
					}
				},
				"variables": {
					"JSONMessage": {
						"type": "String"
					},
					"CustomerNumber": {
						"type": "String"
					},
					"BlobFolderAttachment": {
						"type": "String",
						"defaultValue": "attachment/"
					},
					"BlobContainer": {
						"type": "String",
						"defaultValue": "messaging"
					},
					"isEmailValid": {
						"type": "String"
					},
					"isFoundRecord": {
						"type": "String"
					},
					"Content": {
						"type": "String",
						"defaultValue": "Yth. Pelanggan PT Coca-Cola Distribution Indonesia, <br /><br />Terlampir adalah dokumen E-Faktur Pajak anda. <br /><br />Terima kasih. <br /><br /><i>[THIS IS AN AUTOMATED MESSAGE - PLEASE DO NOT REPLY DIRECTLY TO THIS EMAIL]</i>"
					},
					"Subject": {
						"type": "String",
						"defaultValue": "E-Faktur Pajak PT Coca-Cola Distribution Indonesia Periode "
					},
					"cc": {
						"type": "String"
					},
					"bcc": {
						"type": "String",
						"defaultValue": "andreas.herrinto@ccamatil.com, wisnu.andhika@ccamatil.com"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OLD eTax 4 Read Status')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Status Sending",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "VW_eTaxFileLogWaitingResponse",
									"secret": {
										"value": "@pipeline().parameters.secretCore",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach waiting status",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Status Sending",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Status Sending').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Success in Blob",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileInBlob_message",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('BlobContainer')",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(variables('BlobSuccessFolder'),formatDateTime(item().SentDate,'yyyyMMdd'),'/')",
													"type": "Expression"
												},
												"file": {
													"value": "@concat(item().Messageid,'.json')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "If found in Success",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set if success",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set is email sent",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(not(variables('isEmailSent')),variables('isFound'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Get failed",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "FileInBlob_message",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@variables('BlobContainer')",
																"type": "Expression"
															},
															"directory": {
																"value": "@concat(variables('BlobFailFolder'),formatDateTime(item().SentDate,'yyyyMMdd'),'/')",
																"type": "Expression"
															},
															"file": {
																"value": "@concat(item().Messageid,'.json')",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"exists"
													],
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Set if fail",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get failed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isFound",
													"value": {
														"value": "@activity('Get failed').output.exists",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Exe Pipeline - Move to Sent",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sending')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sent/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Update Log - Sent",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to Sent",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_UpdateResponse",
													"storedProcedureParameters": {
														"Error": {
															"value": null,
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "@concat(pipeline().parameters.sourceDirectory,'/Sent/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"message_id": {
															"value": {
																"value": "@item().Messageid",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "@if(variables('isEmailSent'),'S','U')",
																"type": "Expression"
															},
															"type": "String"
														},
														"Filename": {
															"value": {
																"value": "@item().Filename",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": {
															"value": "@pipeline().parameters.secretCore",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Reset if found variable",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Update Log - Sent",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isFound",
													"value": {
														"value": "@bool(0)",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "If found in fail",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If found in Success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('isFound')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Exe Pipeline - Move to Fail",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sending')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/failed/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Update Log - Fail",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to Fail",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_UpdateResponse",
													"storedProcedureParameters": {
														"Error": {
															"value": {
																"value": "Email is failed to sent",
																"type": "Expression"
															},
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "@concat(pipeline().parameters.sourceDirectory,'/Fail/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"message_id": {
															"value": {
																"value": "@item().Messageid",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "F",
																"type": "Expression"
															},
															"type": "String"
														},
														"Filename": {
															"value": {
																"value": "@item().Filename",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": {
															"value": "@pipeline().parameters.secretCore",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Set if success",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Success in Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "isFound",
										"value": {
											"value": "@activity('Get Success in Blob').output.exists",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set is email sent",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "isEmailSent",
										"value": {
											"value": "@equals(item().Status, 'W')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "VAT Output 2\\VAT Output 3"
					},
					"secretCore": {
						"type": "string",
						"defaultValue": "azure-sql-prd-core"
					}
				},
				"variables": {
					"BlobContainer": {
						"type": "String",
						"defaultValue": "messaging"
					},
					"BlobSuccessFolder": {
						"type": "String",
						"defaultValue": "Success/etax/"
					},
					"BlobFailFolder": {
						"type": "String",
						"defaultValue": "Failed/etax/"
					},
					"isFound": {
						"type": "Boolean"
					},
					"isEmailSent": {
						"type": "Boolean"
					},
					"isSourceFileExists": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax 2 Proses 1 file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup CCAI NPWP",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "spCcaiNpwp_GetEntity",
								"storedProcedureParameters": {
									"TaxNumber": {
										"value": {
											"value": "@split(pipeline().parameters.sourceFile,'-')[0]",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "Configuration",
									"secret": {
										"value": "@pipeline().parameters.secretCore",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Lookup Invoice Info",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "spETax_GetInvoiceInfo",
								"storedProcedureParameters": {
									"TaxInvoice": {
										"value": {
											"value": "@split(pipeline().parameters.sourceFile,'-')[1]",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "Orders",
									"secret": {
										"value": "@pipeline().parameters.secretSales",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "If Invoice Info is found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Invoice Info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Lookup Invoice Info').output,'firstrow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Exe Pipeline - Move to inappropriate file_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"isMove": true
										}
									}
								},
								{
									"name": "Update if invoice info not found",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to inappropriate file_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Error",
										"storedProcedureParameters": {
											"Error": {
												"value": {
													"value": "Invoice is not found",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"Folder": {
												"value": {
													"value": "Inappropriate File",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "I",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@pipeline().parameters.secretCore",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set Customer Number",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CustomerNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.CustomerNumber",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Invoice Date",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Customer Number",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "InvoiceDate",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.BillingDate",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Invoice Number",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Invoice Date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "InvoiceNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.CommercialInvoice",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Tax Number",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Invoice Number",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaxNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.TaxInvoice",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If entity found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup CCAI NPWP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Lookup CCAI NPWP').output,'firstrow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update if entity not found",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to inappropriate file_copy2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Error",
										"storedProcedureParameters": {
											"Error": {
												"value": {
													"value": "Entity is not found",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"Folder": {
												"value": {
													"value": "Inappropriate File",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "I",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@pipeline().parameters.secretCore",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Exe Pipeline - Move to inappropriate file_copy2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"isMove": true
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set entity",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Entity",
										"value": {
											"value": "@activity('Lookup CCAI NPWP').output.firstrow.Entity",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If entity and invoice is found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If entity found",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If Invoice Info is found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(not(equals(variables('Entity'),'')),not(equals(variables('InvoiceNumber'),'')))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set filename",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "newFilename",
										"value": {
											"value": "@concat(variables('Entity'),'-',\nvariables('InvoiceDate'),'-',\nvariables('InvoiceNumber'),'-',\nvariables('CustomerNumber'),'-',\nvariables('TaxNumber'),'.pdf')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Update Log - To Be Sent",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to To Be Sent",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_ToBeSent",
										"storedProcedureParameters": {
											"CustomerNumber": {
												"value": {
													"value": "@variables('CustomerNumber')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": {
													"value": "@variables('newFilename')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@pipeline().parameters.secretCore",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Exe Pipeline - Move to To Be Sent",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@variables('newFilename')",
												"type": "Expression"
											},
											"isMove": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "/dev/Pdf"
					},
					"sourceFile": {
						"type": "string",
						"defaultValue": "010706570201001-0100021927344922-031207392211000-20190731112502.pdf"
					},
					"secretCore": {
						"type": "string",
						"defaultValue": "azure-sql-prd-core"
					},
					"secretSales": {
						"type": "string",
						"defaultValue": "azure-sql-prd-sales"
					}
				},
				"variables": {
					"TaxNumber": {
						"type": "String"
					},
					"Entity": {
						"type": "String"
					},
					"CustomerNumber": {
						"type": "String"
					},
					"newFilename": {
						"type": "String"
					},
					"emailMessage": {
						"type": "String"
					},
					"InvoiceDate": {
						"type": "String"
					},
					"InvoiceNumber": {
						"type": "String"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax 3 Send Email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pdfs in To Be Sent",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
										"type": "Expression"
									},
									"filename": "*.pdf"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Generate Message ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File only').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Lookup Customer Info",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "spCustomer_GetEmailAndOperation",
											"storedProcedureParameters": {
												"CustomerNumber": {
													"value": {
														"value": "@split(item().name,'-')[3]",
														"type": "Expression"
													}
												}
											}
										},
										"dataset": {
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": "Customers",
												"secret": {
													"value": "@pipeline().parameters.secretMasterData",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "If Customer Info is found",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup Customer Info",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(activity('Lookup Customer Info').output,'firstrow')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Update if customer info is not found",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to inappropriate file_copy1_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_Error",
													"storedProcedureParameters": {
														"Error": {
															"value": {
																"value": "Customer Master is not found",
																"type": "Expression"
															},
															"type": "String"
														},
														"Filename": {
															"value": null,
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "Inappropriate File",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"NewFilename": {
															"value": {
																"value": "@item().name",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "I",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": {
															"value": "@pipeline().parameters.secretCore",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Exe Pipeline - Move to inappropriate file_copy1_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"isMove": true
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Exe Pipeline - Move to Processing",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Copy Blob attachment",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sending')",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Get Message ID",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderStoredProcedureName": "[[dbo].[spETaxFileLog_GenerateMessageId]",
														"storedProcedureParameters": {
															"CustomerNumber": {
																"type": "String",
																"value": {
																	"value": "@activity('Lookup Customer Info').output.firstrow.CustomerNumber",
																	"type": "Expression"
																}
															},
															"Email": {
																"type": "String",
																"value": {
																	"value": "@activity('Lookup Customer Info').output.firstrow.Email",
																	"type": "Expression"
																}
															},
															"NewFilename": {
																"type": "String",
																"value": {
																	"value": "@item().name",
																	"type": "Expression"
																}
															},
															"Operation": {
																"type": "String",
																"value": {
																	"value": "@activity('Lookup Customer Info').output.firstrow.Operation",
																	"type": "Expression"
																}
															}
														},
														"queryTimeout": "02:00:00"
													},
													"dataset": {
														"referenceName": "GenericAzureSQLDatabase",
														"type": "DatasetReference",
														"parameters": {
															"table": "eTaxFileLog",
															"secret": {
																"value": "@pipeline().parameters.secretCore",
																"type": "Expression"
															}
														}
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Copy Blob attachment",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Get Message ID",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": true
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "File_in_idcbtap22",
														"type": "DatasetReference",
														"parameters": {
															"directory": {
																"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
																"type": "Expression"
															},
															"filename": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "FileInBlob_message",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@variables('BlobContainer')",
																"type": "Expression"
															},
															"directory": {
																"value": "@concat(variables('BlobFolderAttachment'),activity('Get Message ID').output.firstrow.MessageID)",
																"type": "Expression"
															},
															"file": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter File only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Pdfs in To Be Sent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Pdfs in To Be Sent').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get JSON Message",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Generate Message ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spETaxFileLog_PostMessage]",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "eTaxFileLog",
									"secret": {
										"value": "@pipeline().parameters.secretCore",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Message id",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get JSON Message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get JSON Message').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If email valid",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@item().isEmailValid",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Sending Email",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Sending Email",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"from": {
															"value": "@pipeline().parameters.From",
															"type": "Expression"
														},
														"to": {
															"value": "@item().Email",
															"type": "Expression"
														},
														"message_id": {
															"value": "@item().Messageid",
															"type": "Expression"
														},
														"subject": {
															"value": "@concat(variables('Subject'),' ',formatDateTime(item().SentDate,'MMM yyyy'), ' ', item().Messageid)",
															"type": "Expression"
														},
														"content": {
															"value": "@variables('Content')",
															"type": "Expression"
														},
														"Queue_id": {
															"value": "@pipeline().parameters.queue",
															"type": "Expression"
														},
														"cc": {
															"value": "@variables('cc')",
															"type": "Expression"
														},
														"bcc": {
															"value": "@variables('bcc')",
															"type": "Expression"
														},
														"attachments": {
															"value": "@item().Attachment",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "VAT Output 2\\VAT Output 3"
					},
					"secretCore": {
						"type": "string",
						"defaultValue": "azure-sql-prd-core"
					},
					"secretMasterData": {
						"type": "string",
						"defaultValue": "azure-sql-prd-masterdata"
					},
					"From": {
						"type": "string",
						"defaultValue": "idn.vatoutput@ccamatil.com"
					},
					"queue": {
						"type": "string",
						"defaultValue": "A140452BD16743979AC6058E79BC85A3"
					}
				},
				"variables": {
					"JSONMessage": {
						"type": "String"
					},
					"CustomerNumber": {
						"type": "String"
					},
					"BlobFolderAttachment": {
						"type": "String",
						"defaultValue": "attachment/"
					},
					"BlobContainer": {
						"type": "String",
						"defaultValue": "messaging"
					},
					"isEmailValid": {
						"type": "String"
					},
					"isFoundRecord": {
						"type": "String"
					},
					"Content": {
						"type": "String",
						"defaultValue": "Yth. Pelanggan PT Coca-Cola Distribution Indonesia, <br /><br />Terlampir adalah dokumen E-Faktur Pajak anda. <br /><br />Terima kasih. <br /><br /><i>[THIS IS AN AUTOMATED MESSAGE - PLEASE DO NOT REPLY DIRECTLY TO THIS EMAIL]</i>"
					},
					"Subject": {
						"type": "String",
						"defaultValue": "E-Faktur Pajak PT Coca-Cola Distribution Indonesia Periode "
					},
					"cc": {
						"type": "String"
					},
					"bcc": {
						"type": "String",
						"defaultValue": "andreas.herrinto@ccamatil.com, wisnu.andhika@ccamatil.com"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax 4 Read Status')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Status Sending",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "VW_eTaxFileLogWaitingResponse",
									"secret": {
										"value": "@pipeline().parameters.secretCore",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach waiting status",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Status Sending",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Status Sending').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Success in Blob",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileInBlob_message",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('BlobContainer')",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(variables('BlobSuccessFolder'),formatDateTime(item().SentDate,'yyyyMMdd'),'/')",
													"type": "Expression"
												},
												"file": {
													"value": "@concat(item().Messageid,'.json')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "If found in Success",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set if success",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set is email sent",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(not(variables('isEmailSent')),variables('isFound'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Get failed",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "FileInBlob_message",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@variables('BlobContainer')",
																"type": "Expression"
															},
															"directory": {
																"value": "@concat(variables('BlobFailFolder'),formatDateTime(item().SentDate,'yyyyMMdd'),'/')",
																"type": "Expression"
															},
															"file": {
																"value": "@concat(item().Messageid,'.json')",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"exists"
													],
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Set if fail",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get failed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isFound",
													"value": {
														"value": "@activity('Get failed').output.exists",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Exe Pipeline - Move to Sent",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sending')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sent/',item().Operation,formatDateTime(item().BillingDate,'/yyyy/MM - MMMM/dd'))",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Update Log - Sent",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to Sent",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_UpdateResponse",
													"storedProcedureParameters": {
														"Error": {
															"value": null,
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "@concat(pipeline().parameters.sourceDirectory,'/Sent/',item().Operation,formatDateTime(item().BillingDate,'/yyyy/MM - MMMM/dd'))",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"message_id": {
															"value": {
																"value": "@item().Messageid",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "@if(variables('isEmailSent'),'S','U')",
																"type": "Expression"
															},
															"type": "String"
														},
														"Filename": {
															"value": {
																"value": "@item().Filename",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": {
															"value": "@pipeline().parameters.secretCore",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Reset if found variable",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Update Log - Sent",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isFound",
													"value": {
														"value": "@bool(0)",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "If found in fail",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If found in Success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('isFound')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Exe Pipeline - Move to Fail",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sending')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/failed/',item().Operation,formatDateTime(item().BillingDate,'/yyyy/MM - MMMM/dd'))",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Update Log - Fail",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to Fail",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_UpdateResponse",
													"storedProcedureParameters": {
														"Error": {
															"value": {
																"value": "Email is failed to sent",
																"type": "Expression"
															},
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "@concat(pipeline().parameters.sourceDirectory,'/Fail/',item().Operation,formatDateTime(item().BillingDate,'/yyyy/MM - MMMM/dd'))",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"message_id": {
															"value": {
																"value": "@item().Messageid",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "F",
																"type": "Expression"
															},
															"type": "String"
														},
														"Filename": {
															"value": {
																"value": "@item().Filename",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": {
															"value": "@pipeline().parameters.secretCore",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Set if success",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Success in Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "isFound",
										"value": {
											"value": "@activity('Get Success in Blob').output.exists",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set is email sent",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "isEmailSent",
										"value": {
											"value": "@equals(item().Status, 'W')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "VAT Output 2\\VAT Output 3"
					},
					"secretCore": {
						"type": "string",
						"defaultValue": "azure-sql-prd-core"
					}
				},
				"variables": {
					"BlobContainer": {
						"type": "String",
						"defaultValue": "messaging"
					},
					"BlobSuccessFolder": {
						"type": "String",
						"defaultValue": "Success/etax/"
					},
					"BlobFailFolder": {
						"type": "String",
						"defaultValue": "Failed/etax/"
					},
					"isFound": {
						"type": "Boolean"
					},
					"isEmailSent": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DMS')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Blob to SQL",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourceContainer": "[parameters('DMS_properties_Blob to SQL_parameters_sourceContainer')]",
							"sourceFolder": "[parameters('DMS_properties_Blob to SQL_parameters_sourceFolder')]",
							"backupFolder": "[parameters('DMS_properties_Blob to SQL_parameters_backupFolder')]",
							"Filename": "[parameters('DMS_properties_Blob to SQL_parameters_Filename')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/dms/blobs/Unprocessed",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('DMS_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily Run Trigger - 1 am _ 1 pm')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Integration Run SP",
							"type": "PipelineReference"
						},
						"parameters": {
							"triggerGroup": "[parameters('Daily Run Trigger - 1 am _ 1 pm_properties_Integration Run SP_parameters_triggerGroup')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-01-08T07:59:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								18,
								6
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Integration Run SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Purging Data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Integration Run SP",
							"type": "PipelineReference"
						},
						"parameters": {
							"triggerGroup": "[parameters('Purging Data_properties_Integration Run SP_parameters_triggerGroup')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-03-23T18:00:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								18
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Integration Run SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Survey To Flat Table - 2 am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Integration Run SP",
							"type": "PipelineReference"
						},
						"parameters": {
							"triggerGroup": "[parameters('Survey To Flat Table - 2 am_properties_Integration Run SP_parameters_triggerGroup')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-02-21T11:24:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Integration Run SP')]"
			]
		}
	]
}