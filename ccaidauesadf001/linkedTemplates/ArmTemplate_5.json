{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ccaidauesadf001"
		},
		"Copy-to-Report-DB_properties_CORE My Equipment_parameters_SyncDataFrom": {
			"type": "string",
			"defaultValue": "-"
		},
		"Copy-to-Report-DB_properties_CORE My Equipment_parameters_SyncDataTo": {
			"type": "string",
			"defaultValue": "-"
		},
		"Copy-to-Report-DB_properties_SAM Users_parameters_SyncDataFrom": {
			"type": "string",
			"defaultValue": "-"
		},
		"Copy-to-Report-DB_properties_SAM Users_parameters_SyncDataTo": {
			"type": "string",
			"defaultValue": "-"
		},
		"Copy-to-Report-DB_properties_MD_BUSalesStructure_parameters_SyncDataFrom": {
			"type": "string",
			"defaultValue": "-"
		},
		"Copy-to-Report-DB_properties_MD_BUSalesStructure_parameters_SyncDataTo": {
			"type": "string",
			"defaultValue": "-"
		},
		"Copy-to-Report-DB_properties_SAM Survey Transaction All_parameters_SyncDataFrom": {
			"type": "string",
			"defaultValue": "-"
		},
		"Copy-to-Report-DB_properties_SAM Survey Transaction All_parameters_SyncDataTo": {
			"type": "string",
			"defaultValue": "-"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/eTax 4 Read Status')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Status Sending",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "VW_eTaxFileLogWaitingResponse",
									"secret": {
										"value": "@variables('KeyVaultCore')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach waiting status",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Status Sending",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Status Sending').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Success",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileInBlob",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('BlobContainer')",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(variables('BlobSuccessFolder'),formatDateTime(item().SentDate,'yyyyMMdd'),'/')",
													"type": "Expression"
												},
												"file": {
													"value": "@concat(item().Messageid,'.json')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "If found in Success",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set if success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('isSuccess')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Get failed",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "FileInBlob",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@variables('BlobContainer')",
																"type": "Expression"
															},
															"directory": {
																"value": "@concat(variables('BlobFailFolder'),formatDateTime(item().SentDate,'yyyyMMdd'),'/')",
																"type": "Expression"
															},
															"file": {
																"value": "@concat(item().Messageid,'.json')",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"exists"
													],
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Set if fail",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get failed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isSuccess",
													"value": {
														"value": "@activity('Get failed').output.exists",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Exe Pipeline - Move to Sent",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sending')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sent/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Update Log - Sent",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to Sent",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_UpdateResponse",
													"storedProcedureParameters": {
														"Error": {
															"value": null,
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "@concat(pipeline().parameters.sourceDirectory,'/Sent/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"message_id": {
															"value": {
																"value": "@item().Messageid",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "S",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": "azure-sql-dev-core"
													}
												}
											}
										]
									}
								},
								{
									"name": "If found in fail",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If found in Success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Success').output.exists",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Exe Pipeline - Move to Fail",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sending')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/failed/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Update Log - Fail",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to Fail",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_UpdateResponse",
													"storedProcedureParameters": {
														"Error": {
															"value": null,
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "@concat(pipeline().parameters.sourceDirectory,'/Fail/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"message_id": {
															"value": {
																"value": "@item().Messageid",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "F",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": "azure-sql-dev-core"
													}
												}
											}
										]
									}
								},
								{
									"name": "Set if success",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "isSuccess",
										"value": {
											"value": "@activity('Get Success').output.exists",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "Dev\\Pdf"
					}
				},
				"variables": {
					"KeyVaultCore": {
						"type": "String",
						"defaultValue": "azure-sql-dev-core"
					},
					"BlobContainer": {
						"type": "String",
						"defaultValue": "messaging"
					},
					"BlobSuccessFolder": {
						"type": "String",
						"defaultValue": "Success/etaxdev/"
					},
					"BlobFailFolder": {
						"type": "String",
						"defaultValue": "Failed/etaxdev/"
					},
					"isSuccess": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Integration_SalesOffice')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Integrate_SalesOffice",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Integrate_SalesOffice_Q",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Interface Customer Additionals Dev",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Interface Customer Additionals QA",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-08-07T21:00:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								21
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax 1 File Management')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of File",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.directory",
										"type": "Expression"
									},
									"filename": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "ForEach File PDF",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "File PDF only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('File PDF only').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Create Log in SQL - PDF",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "eTax 2 Proses 1 file",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.directory",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Create Log in SQL - PDF",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Insert",
										"storedProcedureParameters": {
											"CreatedBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": "azure-sql-dev-core"
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter File only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get List of File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of File').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File PDF only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Filter File only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File only').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(split(item().name,'.')[1],'pdf')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File not PDF",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Filter File only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File only').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(equals(split(item().name,'.')[1],'pdf'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach File not PDF",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "File not PDF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('File not PDF').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Update if invoice info is not found",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Create Log in SQL - not PDF",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Error",
										"storedProcedureParameters": {
											"Error": {
												"value": {
													"value": "File is not PDF",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											},
											"Folder": {
												"value": {
													"value": "Not PDF File",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "I",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": "azure-sql-dev-core"
										}
									}
								},
								{
									"name": "Exe Pipeline - Move to not PDF file folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Update if invoice info is not found",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.directory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.directory,'/Not PDF File')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								},
								{
									"name": "Create Log in SQL - not PDF",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Insert",
										"storedProcedureParameters": {
											"CreatedBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": "azure-sql-dev-core"
										}
									}
								}
							]
						}
					},
					{
						"name": "Execute Sending Email",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach File PDF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "eTax 3 Send Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sourceDirectory": {
									"value": "@pipeline().parameters.directory",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Read Status",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Sending Email",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "eTax 4 Read Status",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"sourceDirectory": {
									"value": "@pipeline().parameters.directory",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"directory": {
						"type": "string",
						"defaultValue": "dev/Pdf"
					}
				},
				"variables": {
					"newFilename": {
						"type": "Array"
					},
					"fileTarget": {
						"type": "String"
					},
					"isFile": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/eTax 4 Read Status')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy-to-Report-DB')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy to Report Database",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CORE My Equipment",
							"type": "PipelineReference"
						},
						"parameters": {
							"SyncDataFrom": "[parameters('Copy-to-Report-DB_properties_CORE My Equipment_parameters_SyncDataFrom')]",
							"SyncDataTo": "[parameters('Copy-to-Report-DB_properties_CORE My Equipment_parameters_SyncDataTo')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "SAM Users",
							"type": "PipelineReference"
						},
						"parameters": {
							"SyncDataFrom": "[parameters('Copy-to-Report-DB_properties_SAM Users_parameters_SyncDataFrom')]",
							"SyncDataTo": "[parameters('Copy-to-Report-DB_properties_SAM Users_parameters_SyncDataTo')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "MD_BUSalesStructure",
							"type": "PipelineReference"
						},
						"parameters": {
							"SyncDataFrom": "[parameters('Copy-to-Report-DB_properties_MD_BUSalesStructure_parameters_SyncDataFrom')]",
							"SyncDataTo": "[parameters('Copy-to-Report-DB_properties_MD_BUSalesStructure_parameters_SyncDataTo')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "SAM Survey Transaction All",
							"type": "PipelineReference"
						},
						"parameters": {
							"SyncDataFrom": "[parameters('Copy-to-Report-DB_properties_SAM Survey Transaction All_parameters_SyncDataFrom')]",
							"SyncDataTo": "[parameters('Copy-to-Report-DB_properties_SAM Survey Transaction All_parameters_SyncDataTo')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "Integration Report",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-08-21T09:10:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								18
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "eTax 1 File Management",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2019-12-10T05:16:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/eTax 1 File Management')]"
			]
		}
	]
}