{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ccaidauesadf001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CORE_DeleteNotification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CORE_DeleteNotification",
						"description": "Delete Notification Expired Password in CORE",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_DeleteNotification]"
						},
						"linkedServiceName": {
							"referenceName": "GenericAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"Secret": "@variables('secretConfiguration')"
							}
						}
					}
				],
				"variables": {
					"secretConfiguration": {
						"type": "String",
						"defaultValue": "azure-sql-prd-core"
					}
				},
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Call Store Procedure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call Store Procedure",
						"description": "Integrate from Customer to SalesOffice",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@pipeline().parameters.storeprocedure",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "GenericAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"Secret": {
									"value": "@pipeline().parameters.secret",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"secret": {
						"type": "string",
						"defaultValue": "azure-sql-dev-masterdata"
					},
					"storeprocedure": {
						"type": "string",
						"defaultValue": "usp_IntegrationSalesOffice"
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sending Email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send Email",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Set json Message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "PostMessage",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(variables('jsonBody'))",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "MessagingFunction",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set json Message",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "jsonBody",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(replace(replace(replace(variables('templateBody'),'~from~',pipeline().parameters.from),'~to~',pipeline().parameters.to),'~SUBJECT~',pipeline().parameters.subject),'~CONTENT~',pipeline().parameters.content),'~MESSAGEGUID~',pipeline().parameters.message_id),'~QUEUEGUID~',pipeline().parameters.Queue_id),'~cc~', pipeline().parameters.cc), '~bcc~', pipeline().parameters.bcc), '~ATTACHMENTS~', pipeline().parameters.attachments)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"from": {
						"type": "string"
					},
					"to": {
						"type": "string"
					},
					"message_id": {
						"type": "string"
					},
					"subject": {
						"type": "string"
					},
					"content": {
						"type": "string"
					},
					"Queue_id": {
						"type": "string"
					},
					"cc": {
						"type": "string"
					},
					"bcc": {
						"type": "string"
					},
					"attachments": {
						"type": "string",
						"defaultValue": " "
					}
				},
				"variables": {
					"jsonBody": {
						"type": "String"
					},
					"templateBody": {
						"type": "String",
						"defaultValue": "'{   \"queue_id\": \"~QUEUEGUID~\",   \"message\": {     \"type\": \"email\",     \"message_id\": \"~MESSAGEGUID~\",     \"from\": \"~from~\",     \"to\": \"~to~\",     \"cc\": \"~cc~\",     \"bcc\": \"~bcc~\",     \"subject\": \"~SUBJECT~\",     \"content\": \"~CONTENT~\",     \"attachment\": [~ATTACHMENTS~]   } }'"
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CsvFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().deliminator",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileInBlob_adf_dev')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobADFDev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileInBlob_message')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileInBlob_roam_prd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobROAM_prd",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/File_in_idcbtap22')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eTaxFileSource",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "eTax Share Folder"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericAzureSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericAzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"Secret": {
							"value": "@dataset().secret",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"table": {
						"type": "string"
					},
					"secret": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericSqlServer_CCAIDWPRDB004')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericSqlServer_CCAIDWPRDB004",
					"type": "LinkedServiceReference",
					"parameters": {
						"secret": {
							"value": "@dataset().secret",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"secret": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SQL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PdfFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eTaxFileSource",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "eTax Share Folder"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": "D:\\Dev\\Pdf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_DMS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SFTP_DMS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_HR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SFTP_HR",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZipFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().deliminator",
						"type": "Expression"
					},
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZipFile_adf_dev')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobADFDev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().deliminator",
						"type": "Expression"
					},
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZipInSFTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "CSV in ZIP in SFTP",
				"linkedServiceName": {
					"referenceName": "SFTP_DMS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"column_deliminator": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SFTP"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().column_deliminator",
						"type": "Expression"
					},
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\"",
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UpdateInvalidStatus_DataSubmitStaging')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "UpdateInvalidStatus_DataSubmitStaging",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2019-08-23T07:56:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob to SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Filename",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spDmsToCore_GetFilename]",
								"storedProcedureParameters": {
									"Filename": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Filename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": {
										"value": "Config",
										"type": "Expression"
									},
									"secret": {
										"value": "@pipeline().parameters.secretConfiguration",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "If File Found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Lookup Filename').output,'firstrow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Backup file",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "FileInBlob_adf_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceFolder",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FileInBlob_adf_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.backupFolder,'/Others/',formatDateTime(utcnow(),'yyyyMMdd'))",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Source File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileInBlob_adf_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceFolder",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "Execute Send Email fail to backup file_false",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Backup file",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('Backup file CSV ', pipeline().parameters.Filename, ' to ',pipeline().parameters.backupFolder,'/Others is error')",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This is notification for failure process of backup file ', pipeline().parameters.Filename, ' to ', pipeline().parameters.backupFolder,'/Others')",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								},
								{
									"name": "Execute Send Email fail to delete source file dms_false",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Delete Source File",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('Deletefile CSV ', pipeline().parameters.Filename,' is error')",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This is notification for failure process of delete file ', pipeline().parameters.Filename)",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Backup file dms",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy CSV to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "FileInBlob_adf_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceFolder",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FileInBlob_adf_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.backupFolder,'/',activity('Lookup Filename').output.firstrow.BackupFolder,'/',formatDateTime(convertFromUtc(utcnow(),'SE Asia Standard Time'),'yyyyMMdd'))",
													"type": "Expression"
												},
												"file": {
													"value": "@concat(formatDateTime(convertFromUtc(utcnow(),'SE Asia Standard Time'),'yyyyMMdd_hhmmss'),'_',pipeline().parameters.Filename)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Source File dms",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup file dms",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileInBlob_adf_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceFolder",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "Copy CSV to Staging",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ZipFile_adf_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceFolder",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												},
												"deliminator": {
													"value": "|",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@activity('Lookup Filename').output.firstrow.StagingTable",
													"type": "Expression"
												},
												"secret": {
													"value": "@activity('Lookup Filename').output.firstrow.TargetKeySecret",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Execute Send Email fail to copy",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy CSV to Staging",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('Integration FAILED copy CSV ', pipeline().parameters.Filename, ' to ',activity('Lookup Filename').output.firstrow.StagingTable,' is error')",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This Integration when copy csv ', pipeline().parameters.Filename, ' to ', activity('Lookup Filename').output.firstrow.StagingTable)",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								},
								{
									"name": "Execute Send Email fail to backup file",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Backup file dms",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('Backup file CSV ', pipeline().parameters.Filename, ' to ',pipeline().parameters.backupFolder,'/',activity('Lookup Filename').output.firstrow.BackupFolder,' is error')",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This is notification for failure process of backup file ', pipeline().parameters.Filename, ' to ', pipeline().parameters.backupFolder,'/',activity('Lookup Filename').output.firstrow.BackupFolder)",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								},
								{
									"name": "Execute Send Email fail to delete source file dms",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Delete Source File dms",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('Deletefile CSV ', pipeline().parameters.Filename,' is error')",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This is notification for failure process of delete file ', pipeline().parameters.Filename)",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								}
							]
						}
					},
					{
						"name": "If Load SP not blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If File Found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(contains(activity('Lookup Filename').output,'firstrow'),not(equals(activity('Lookup Filename').output.firstrow.LoadSP,'')))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Run Load SP",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@activity('Lookup Filename').output.firstrow.LoadSP",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@activity('Lookup Filename').output.firstrow.TargetKeySecret",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Send Email fail to Run Load SP",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Run Load SP",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('FAILED to run SP ', activity('Lookup Filename').output.firstrow.LoadSP)",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This is notification for failure process of Run Load SP ', activity('Lookup Filename').output.firstrow.LoadSP)",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"sourceContainer": {
						"type": "string",
						"defaultValue": "dms"
					},
					"sourceFolder": {
						"type": "string",
						"defaultValue": "Unprocessed"
					},
					"backupFolder": {
						"type": "string",
						"defaultValue": "History"
					},
					"Filename": {
						"type": "string",
						"defaultValue": "ScanAssetBarcode.zip"
					},
					"secretConfiguration": {
						"type": "string",
						"defaultValue": "azure-sql-dev-core"
					}
				},
				"variables": {
					"emailTo": {
						"type": "String",
						"defaultValue": "andreas.herrinto@ccamatil.com"
					},
					"emailCc": {
						"type": "String",
						"defaultValue": "siska.limanto@ccamatil.com"
					},
					"emailBcc": {
						"type": "String"
					},
					"emailFrom": {
						"type": "String",
						"defaultValue": "idn.adf.ReportIntegration@ccamatil.com"
					},
					"emailQueue": {
						"type": "String",
						"defaultValue": "664CDAFA44B642DDB511046AFC2C732A"
					}
				},
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/FileInBlob_adf_dev')]",
				"[concat(variables('factoryId'), '/pipelines/Sending Email')]",
				"[concat(variables('factoryId'), '/datasets/ZipFile_adf_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy CSV to SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy CSV (Zipped) to SQL from blob storage",
				"activities": [
					{
						"name": "If file zipped",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.isZipped",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy csv to sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{if(pipeline().parameters.isTruncate,concat('IF OBJECT_ID (N''',pipeline().parameters.staggingTable,''', N''U'') IS NOT NULL TRUNCATE TABLE ',pipeline().parameters.staggingTable),'')}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "CsvFile",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.file",
													"type": "Expression"
												},
												"deliminator": {
													"value": "@pipeline().parameters.deliminator",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@pipeline().parameters.staggingTable",
													"type": "Expression"
												},
												"secret": {
													"value": "@pipeline().parameters.secret",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy zip to sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{if(pipeline().parameters.isTruncate,concat('IF OBJECT_ID (N''',pipeline().parameters.staggingTable,''', N''U'') IS NOT NULL TRUNCATE TABLE ',pipeline().parameters.staggingTable),'')}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ZipFile",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.file",
													"type": "Expression"
												},
												"deliminator": {
													"value": "@pipeline().parameters.deliminator",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@pipeline().parameters.staggingTable",
													"type": "Expression"
												},
												"secret": {
													"value": "@pipeline().parameters.secret",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					},
					"staggingTable": {
						"type": "string"
					},
					"secret": {
						"type": "string"
					},
					"isTruncate": {
						"type": "bool"
					},
					"isZipped": {
						"type": "bool"
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CsvFile')]",
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/ZipFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy SQL to SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch is source Type and target table exists",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Target Database Type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@concat(pipeline().parameters.sourceDbType,'-',pipeline().parameters.sourceDbType,'-',variables('isExists'))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "PaaS-PaaS-True",
									"activities": [
										{
											"name": "Copy PaaS to PaaS w Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink",
													"preCopyScript": {
														"value": "@{concat('TRUNCATE TABLE ', pipeline().parameters.targetTable)}",
														"type": "Expression"
													},
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "PaaS-PaaS-False",
									"activities": [
										{
											"name": "Copy PaaS to PaaS wo Truncate",
											"description": "Copy without truncate first",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink",
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-PaaS-True",
									"activities": [
										{
											"name": "Copy IaaS to PaaS w Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink",
													"preCopyScript": {
														"value": "@{concat('TRUNCATE TABLE ', pipeline().parameters.targetTable)}",
														"type": "Expression"
													},
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-PaaS-False",
									"activities": [
										{
											"name": "Copy IaaS to PaaS wo Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink",
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-IaaS-True",
									"activities": [
										{
											"name": "Copy IaaS to IaaS w Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SqlServerSink",
													"preCopyScript": {
														"value": "@{concat('TRUNCATE TABLE ', pipeline().parameters.targetTable)}",
														"type": "Expression"
													},
													"tableOption": "autoCreate"
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-IaaS-False",
									"activities": [
										{
											"name": "Copy IaaS to IaaS wo Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SqlServerSink",
													"tableOption": "autoCreate"
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					},
					{
						"name": "Target Database Type",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.targetDbType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "PaaS",
									"activities": [
										{
											"name": "Check IsExists Target Table PaaS",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"exists"
												]
											}
										},
										{
											"name": "Set isExists PaaS",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Check IsExists Target Table PaaS",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "isExists",
												"value": {
													"value": "@string(activity('Check IsExists Target Table PaaS').output.exists)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "IaaS",
									"activities": [
										{
											"name": "Check IsExists Target Table IaaS",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"exists"
												]
											}
										},
										{
											"name": "Set isExists IaaS",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Check IsExists Target Table IaaS",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "isExists",
												"value": {
													"value": "@string(activity('Check IsExists Target Table IaaS').output.exists)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"sourceSecret": {
						"type": "string"
					},
					"sourceTable": {
						"type": "string"
					},
					"sourceDbType": {
						"type": "string",
						"defaultValue": "PaaS"
					},
					"targetSecret": {
						"type": "string"
					},
					"targetTable": {
						"type": "string"
					},
					"targetDbType": {
						"type": "string",
						"defaultValue": "PaaS"
					}
				},
				"variables": {
					"isExists": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/GenericSqlServer_CCAIDWPRDB004')]"
			]
		}
	]
}