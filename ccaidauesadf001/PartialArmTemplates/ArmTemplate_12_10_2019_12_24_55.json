{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ccaidauesadf001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CSV - Report SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy CSV (Zipped) to SQL from blob storage",
				"activities": [
					{
						"name": "List All Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Guid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "Integration_FromCSV",
									"secret": {
										"value": "@variables('secretIntegrationMaster')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Integration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List All Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List All Data').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy blob to SQL Report",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Switch to copy CSV in SFTP to Blob Storage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy CSV to SQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"container": {
												"value": "@item().container",
												"type": "Expression"
											},
											"directory": {
												"value": "@item().sourceDirectory",
												"type": "Expression"
											},
											"file": {
												"value": "@item().sourceFilename",
												"type": "Expression"
											},
											"deliminator": {
												"value": "@item().deliminator",
												"type": "Expression"
											},
											"staggingTable": {
												"value": "@item().staggingTable",
												"type": "Expression"
											},
											"secret": {
												"value": "@item().keyVaultSQL",
												"type": "Expression"
											},
											"isTruncate": {
												"value": "@bool('true')",
												"type": "Expression"
											},
											"isZipped": {
												"value": "@bool(item().isZipped)",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "move to success folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Run Store Procedure to move to final table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move in Blob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"container": {
												"value": "@item().container",
												"type": "Expression"
											},
											"sourceDirectory": {
												"value": "@item().sourceDirectory",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@item().sourceFilename",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(item().backupDirectory,'/success/',formatDateTime(addhours(utcnow(),7),'yyyyMMdd'))",
												"type": "Expression"
											},
											"targetFile": {
												"value": "@concat(formatDateTime(addhours(utcnow(),7),'yyyyMMdd_hhmmss_'),item().sourceFilename)",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								},
								{
									"name": "move to fail folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Run Store Procedure to move to final table",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move in Blob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"container": {
												"value": "@item().container",
												"type": "Expression"
											},
											"sourceDirectory": {
												"value": "@item().sourceDirectory",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@item().sourceFilename",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(item().backupDirectory,'/fail/',formatDateTime(addhours(utcnow(),7),'yyyyMMdd'))",
												"type": "Expression"
											},
											"targetFile": {
												"value": "@concat(formatDateTime(addhours(utcnow(),7),'yyyyMMdd_hhmmss_'),item().sourceFilename)",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								},
								{
									"name": "Run Store Procedure to move to final table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy blob to SQL Report",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().spProcessData",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@item().keyVaultSQL",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log when copy error",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy blob to SQL Report",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@variables('spLog')",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"Guid": {
												"value": {
													"value": "@variables('idIntegration')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IntegrationName": {
												"value": {
													"value": "@item().IntegrationName",
													"type": "Expression"
												},
												"type": "String"
											},
											"IntegrationTime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTimeOffset"
											},
											"Message": {
												"value": {
													"value": "@string(activity('Copy blob to SQL Report').error)",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "error",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@variables('secretIntegrationMaster')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log when run Store Procedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Run Store Procedure to move to final table",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@variables('spLog')",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"Guid": {
												"value": {
													"value": "@variables('idIntegration')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IntegrationName": {
												"value": {
													"value": "@item().IntegrationName",
													"type": "Expression"
												},
												"type": "String"
											},
											"IntegrationTime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTimeOffset"
											},
											"Message": {
												"value": {
													"value": "@string(activity('Run Store Procedure to move to final table').error)",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "error",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@variables('secretIntegrationMaster')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Switch to copy CSV in SFTP to Blob Storage",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().SFTP",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "SFTP_DMS",
												"activities": [
													{
														"name": "Copy CSV from SFTP DMS to Blob",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "SftpReadSettings",
																	"recursive": true
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SFTP_DMS",
																"type": "DatasetReference",
																"parameters": {
																	"directory": {
																		"value": "@item().SFTP_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().sourceFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "FileInBlob",
																"type": "DatasetReference",
																"parameters": {
																	"container": {
																		"value": "@item().container",
																		"type": "Expression"
																	},
																	"directory": {
																		"value": "@item().sourceDirectory",
																		"type": "Expression"
																	},
																	"file": {
																		"value": "@item().sourceFilename",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "SFTP_HR",
												"activities": [
													{
														"name": "Copy CSV from SFTP HR to Blob",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "SftpReadSettings",
																	"recursive": true
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SFTP_HR",
																"type": "DatasetReference",
																"parameters": {
																	"directory": {
																		"value": "@item().SFTP_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().sourceFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "FileInBlob",
																"type": "DatasetReference",
																"parameters": {
																	"container": {
																		"value": "@item().container",
																		"type": "Expression"
																	},
																	"directory": {
																		"value": "@item().sourceDirectory",
																		"type": "Expression"
																	},
																	"file": {
																		"value": "@item().sourceFilename",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"name": "move to fail folder_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy blob to SQL Report",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move in Blob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"container": {
												"value": "@item().container",
												"type": "Expression"
											},
											"sourceDirectory": {
												"value": "@item().sourceDirectory",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@item().sourceFilename",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(item().backupDirectory,'/fail/',formatDateTime(addhours(utcnow(),7),'yyyyMMdd'))",
												"type": "Expression"
											},
											"targetFile": {
												"value": "@concat(formatDateTime(addhours(utcnow(),7),'yyyyMMdd_hhmmss_'),item().sourceFilename)",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								}
							]
						}
					},
					{
						"name": "Log error message when look up",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "List All Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('spLog')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"Guid": {
									"value": {
										"value": "@variables('idIntegration')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": "List Integration Master",
									"type": "String"
								},
								"IntegrationTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Message": {
									"value": {
										"value": "@string(activity('List All Data').error)",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "GenericAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"Secret": {
									"value": "@variables('secretIntegrationMaster')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set Guid",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "idIntegration",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"secretIntegrationMaster": {
						"type": "String",
						"defaultValue": "azure-sql-prd-report"
					},
					"tableIntegrationMaster": {
						"type": "String",
						"defaultValue": "Integration_FromCSV"
					},
					"spLog": {
						"type": "String",
						"defaultValue": "Integration_FromCSV_Log_Insert"
					},
					"idIntegration": {
						"type": "String"
					},
					"debug": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Production/Export To Reporting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/Copy CSV to SQL')]",
				"[concat(variables('factoryId'), '/pipelines/Copy or Move in Blob')]",
				"[concat(variables('factoryId'), '/datasets/SFTP_DMS')]",
				"[concat(variables('factoryId'), '/datasets/FileInBlob')]",
				"[concat(variables('factoryId'), '/datasets/SFTP_HR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy CSV to SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy CSV (Zipped) to SQL from blob storage",
				"activities": [
					{
						"name": "If file zipped",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.isZipped",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy csv to sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{if(pipeline().parameters.isTruncate,concat('IF OBJECT_ID (N''',pipeline().parameters.staggingTable,''', N''U'') IS NOT NULL TRUNCATE TABLE ',pipeline().parameters.staggingTable),'')}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "CsvFile",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.file",
													"type": "Expression"
												},
												"deliminator": {
													"value": "@pipeline().parameters.deliminator",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@pipeline().parameters.staggingTable",
													"type": "Expression"
												},
												"secret": {
													"value": "@pipeline().parameters.secret",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy zip to sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{if(pipeline().parameters.isTruncate,concat('IF OBJECT_ID (N''',pipeline().parameters.staggingTable,''', N''U'') IS NOT NULL TRUNCATE TABLE ',pipeline().parameters.staggingTable),'')}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ZipFile",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.file",
													"type": "Expression"
												},
												"deliminator": {
													"value": "@pipeline().parameters.deliminator",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@pipeline().parameters.staggingTable",
													"type": "Expression"
												},
												"secret": {
													"value": "@pipeline().parameters.secret",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					},
					"staggingTable": {
						"type": "string"
					},
					"secret": {
						"type": "string"
					},
					"isTruncate": {
						"type": "bool"
					},
					"isZipped": {
						"type": "bool"
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CsvFile')]",
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/ZipFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy or Move File idcbtap22')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to target",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.sourceFilename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.targetDirectory",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.targetFilename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "If isMove then delete source file",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy data to target",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.isMove",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete source file",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "File_in_idcbtap22",
											"type": "DatasetReference",
											"parameters": {
												"directory": {
													"value": "@pipeline().parameters.sourceDirectory",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.sourceFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"sourceDirectory": {
						"type": "string"
					},
					"sourceFilename": {
						"type": "string"
					},
					"targetDirectory": {
						"type": "string"
					},
					"targetFilename": {
						"type": "string"
					},
					"isMove": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/File_in_idcbtap22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy or Move in Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy CSV (Zipped) to SQL from blob storage",
				"activities": [
					{
						"name": "Copy Blob to Success folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FileInBlob",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.sourceFile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FileInBlob",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.targetDirectory",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.targetFile",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "If isMove then delete source file",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy Blob to Success folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.isMove",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete source file",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileInBlob",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceDirectory",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"container": {
						"type": "string"
					},
					"sourceDirectory": {
						"type": "string"
					},
					"sourceFile": {
						"type": "string"
					},
					"targetDirectory": {
						"type": "string"
					},
					"targetFile": {
						"type": "string"
					},
					"isMove": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FileInBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax File Management')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of File",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.directory",
										"type": "Expression"
									},
									"filename": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "ForEach File PDF",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "File PDF only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('File PDF only').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute File",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Create Log in SQL - PDF",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "eTax Proses 1 file",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.directory",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Create Log in SQL - PDF",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Insert",
										"storedProcedureParameters": {
											"CreatedBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": "azure-sql-dev-core"
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter File only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get List of File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of File').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File PDF only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Filter File only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File only').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(split(item().name,'.')[1],'pdf')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File not PDF",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Filter File only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File only').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(equals(split(item().name,'.')[1],'pdf'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach File not PDF",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "File not PDF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('File not PDF').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Update if invoice info is not found",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Create Log in SQL - not PDF",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Error",
										"storedProcedureParameters": {
											"Error": {
												"value": {
													"value": "File is not PDF",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											},
											"Folder": {
												"value": {
													"value": "Not PDF File",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "I",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": "azure-sql-dev-core"
										}
									}
								},
								{
									"name": "Exe Pipeline - Move to not PDF file folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Update if invoice info is not found",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.directory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.directory,'/Not PDF File')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								},
								{
									"name": "Create Log in SQL - not PDF",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Insert",
										"storedProcedureParameters": {
											"CreatedBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": "azure-sql-dev-core"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"directory": {
						"type": "string",
						"defaultValue": "dev/Pdf"
					}
				},
				"variables": {
					"newFilename": {
						"type": "Array"
					},
					"fileTarget": {
						"type": "String"
					},
					"isFile": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/File_in_idcbtap22')]",
				"[concat(variables('factoryId'), '/pipelines/eTax Proses 1 file')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax Proses 1 file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup CCAI NPWP",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "spCcaiNpwp_GetEntity",
								"storedProcedureParameters": {
									"TaxNumber": {
										"value": {
											"value": "@split(pipeline().parameters.sourceFile,'-')[0]",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "Configuration",
									"secret": "azure-sql-dev-core"
								}
							}
						}
					},
					{
						"name": "Lookup Invoice Info",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "spETax_GetInvoiceInfo",
								"storedProcedureParameters": {
									"TaxInvoice": {
										"value": {
											"value": "@split(pipeline().parameters.sourceFile,'-')[1]",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "Orders",
									"secret": "azure-sql-dev-sales"
								}
							}
						}
					},
					{
						"name": "If Invoice Info is found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Invoice Info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Lookup Invoice Info').output,'firstrow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Exe Pipeline - Move to inappropriate file_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								},
								{
									"name": "Update if invoice info not found",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to inappropriate file_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Error",
										"storedProcedureParameters": {
											"Error": {
												"value": {
													"value": "Invoice is not found",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"Folder": {
												"value": {
													"value": "Inappropriate File",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "I",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": "azure-sql-dev-core"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set Customer Number",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CustomerNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.CustomerNumber",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Invoice Date",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Customer Number",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "InvoiceDate",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.BillingDate",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Invoice Number",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Invoice Date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "InvoiceNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.CommercialInvoice",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Tax Number",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Invoice Number",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaxNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.TaxInvoice",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If entity found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup CCAI NPWP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Lookup CCAI NPWP').output,'firstrow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update if entity not found",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to inappropriate file_copy2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Error",
										"storedProcedureParameters": {
											"Error": {
												"value": {
													"value": "Entity is not found",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"Folder": {
												"value": {
													"value": "Inappropriate File",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "I",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": "azure-sql-dev-core"
										}
									}
								},
								{
									"name": "Exe Pipeline - Move to inappropriate file_copy2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set entity",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Entity",
										"value": {
											"value": "@activity('Lookup CCAI NPWP').output.firstrow.Entity",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If entity and invoice is found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If entity found",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If Invoice Info is found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(not(equals(variables('Entity'),'')),not(equals(variables('InvoiceNumber'),'')))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set filename",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "newFilename",
										"value": {
											"value": "@concat(variables('Entity'),'-',\nvariables('InvoiceDate'),'-',\nvariables('InvoiceNumber'),'-',\nvariables('CustomerNumber'),'-',\nvariables('TaxNumber'),'.pdf')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Update Log - To Be Sent",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to To Be Sent",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_ToBeSent",
										"storedProcedureParameters": {
											"CustomerNumber": {
												"value": {
													"value": "@variables('CustomerNumber')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": {
													"value": "@variables('newFilename')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": "azure-sql-dev-core"
										}
									}
								},
								{
									"name": "Exe Pipeline - Move to To Be Sent",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@variables('newFilename')",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "/dev/Pdf"
					},
					"sourceFile": {
						"type": "string",
						"defaultValue": "010706570201001-0100021927344922-031207392211000-20190731112502.pdf"
					}
				},
				"variables": {
					"TaxNumber": {
						"type": "String"
					},
					"Entity": {
						"type": "String"
					},
					"CustomerNumber": {
						"type": "String"
					},
					"newFilename": {
						"type": "String"
					},
					"emailMessage": {
						"type": "String"
					},
					"InvoiceDate": {
						"type": "String"
					},
					"InvoiceNumber": {
						"type": "String"
					},
					"TestVar": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax Send Email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pdfs in To Be Sent",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
										"type": "Expression"
									},
									"filename": "*.pdf"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Check in Log",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File only').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Lookup Customer Info",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "spCustomer_GetEmailAndOperation",
											"storedProcedureParameters": {
												"CustomerNumber": {
													"value": {
														"value": "@split(item().name,'-')[3]",
														"type": "Expression"
													}
												}
											}
										},
										"dataset": {
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": "Customers",
												"secret": "azure-sql-dev-masterdata"
											}
										}
									}
								},
								{
									"name": "If Customer Info is found",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup Customer Info",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(activity('Lookup Customer Info').output,'firstrow')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Update if customer info is not found",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to inappropriate file_copy1_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_Error",
													"storedProcedureParameters": {
														"Error": {
															"value": {
																"value": "Customer Master is not found",
																"type": "Expression"
															},
															"type": "String"
														},
														"Filename": {
															"value": null,
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "Inappropriate File",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"NewFilename": {
															"value": {
																"value": "@item().name",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "I",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": "azure-sql-dev-core"
													}
												}
											},
											{
												"name": "Exe Pipeline - Move to inappropriate file_copy1_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"isMove": "true"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Generate message Id - Status P",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_GenerateMessageId",
													"storedProcedureParameters": {
														"CustomerNumber": {
															"value": {
																"value": "@activity('Lookup Customer Info').output.firstrow.CustomerNumber",
																"type": "Expression"
															},
															"type": "String"
														},
														"Email": {
															"value": {
																"value": "@activity('Lookup Customer Info').output.firstrow.Email",
																"type": "Expression"
															},
															"type": "String"
														},
														"NewFilename": {
															"value": {
																"value": "@item().name",
																"type": "Expression"
															},
															"type": "String"
														},
														"Operation": {
															"value": {
																"value": "@activity('Lookup Customer Info').output.firstrow.Operation",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": "azure-sql-dev-core"
													}
												}
											},
											{
												"name": "Exe Pipeline - Move to Processing",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Generate message Id - Status P",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sent/',activity('Lookup Customer Info').output.firstrow.Operation,formatDateTime(utcnow(),'/yyyy/MM - MMMM/dd'))",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter File only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Pdfs in To Be Sent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Pdfs in To Be Sent').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "Dev\\Pdf"
					}
				},
				"variables": {
					"JSONMessage": {
						"type": "String"
					},
					"CustomerNumber": {
						"type": "String"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/File_in_idcbtap22')]",
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CsvFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().deliminator",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileInBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/File_in_idcbtap22')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eTaxFileSource",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Binary"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eTaxFileSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericAzureSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericAzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"Secret": {
							"value": "@dataset().secret",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"table": {
						"type": "string"
					},
					"secret": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PdfFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eTaxFileSource",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Binary"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": "D:\\Dev\\Pdf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eTaxFileSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Production_Report')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_REPORT_PRODUCTION",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Production/Report DB"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Site",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Number",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ArticleGroupingListId",
						"type": "nvarchar"
					},
					{
						"name": "BillToCustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "TaxClass",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "RegionCode",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "TelNumber",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Street",
						"type": "nvarchar"
					},
					{
						"name": "PrecinctId",
						"type": "nvarchar"
					},
					{
						"name": "Email",
						"type": "nvarchar"
					},
					{
						"name": "MarketTypeId",
						"type": "nvarchar"
					},
					{
						"name": "TradeChannelId",
						"type": "nvarchar"
					},
					{
						"name": "SubTradeChannelId",
						"type": "nvarchar"
					},
					{
						"name": "BusinessOwnerId",
						"type": "nvarchar"
					},
					{
						"name": "TradeNameId",
						"type": "nvarchar"
					},
					{
						"name": "CustomerTypeId",
						"type": "nvarchar"
					},
					{
						"name": "AccountGroupId",
						"type": "nvarchar"
					},
					{
						"name": "BusinessTypeId",
						"type": "nvarchar"
					},
					{
						"name": "OperationalRegionId",
						"type": "nvarchar"
					},
					{
						"name": "LicenseTypeId",
						"type": "nvarchar"
					},
					{
						"name": "LicenseNumber",
						"type": "nvarchar"
					},
					{
						"name": "AcsNumber",
						"type": "nvarchar"
					},
					{
						"name": "AtoNumber",
						"type": "nvarchar"
					},
					{
						"name": "WholesalerCustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "GlobalCustomerNumberId",
						"type": "nvarchar"
					},
					{
						"name": "HardStartTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "HardEndTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "SoftStartTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "SoftEndTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "ServicePolicyId",
						"type": "nvarchar"
					},
					{
						"name": "SalesPolicyId",
						"type": "nvarchar"
					},
					{
						"name": "SuppressionId",
						"type": "nvarchar"
					},
					{
						"name": "CreditBlock",
						"type": "bit"
					},
					{
						"name": "OrderBlockId",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryServiceCoordinatorId",
						"type": "nvarchar"
					},
					{
						"name": "PreferredOrderMethodId",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderRequiredId",
						"type": "nvarchar"
					},
					{
						"name": "SalesOfficeId",
						"type": "nvarchar"
					},
					{
						"name": "TermsOfPaymentId",
						"type": "nvarchar"
					},
					{
						"name": "SalesOrganisationId",
						"type": "nvarchar"
					},
					{
						"name": "DistributionChannelId",
						"type": "nvarchar"
					},
					{
						"name": "DivisionId",
						"type": "nvarchar"
					},
					{
						"name": "Latitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Longitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "PriceBookId",
						"type": "nvarchar"
					},
					{
						"name": "ConditionGroup1Id",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryDelayDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToCustomerName",
						"type": "nvarchar"
					},
					{
						"name": "PayerCustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "PayerCustomerName",
						"type": "nvarchar"
					},
					{
						"name": "BusinessOwnerEmail",
						"type": "nvarchar"
					},
					{
						"name": "RewardStatusId",
						"type": "nvarchar"
					},
					{
						"name": "RewardTierId",
						"type": "nvarchar"
					},
					{
						"name": "MobileNumber",
						"type": "nvarchar"
					},
					{
						"name": "FaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "StoreNumber",
						"type": "nvarchar"
					},
					{
						"name": "TaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "VatRegisteredNumber",
						"type": "nvarchar"
					},
					{
						"name": "EquipmentContractNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerProFormaPricingId",
						"type": "nvarchar"
					},
					{
						"name": "CreditCardSurcharge",
						"type": "nvarchar"
					},
					{
						"name": "StoreKeyNumber",
						"type": "nvarchar"
					},
					{
						"name": "HasPrintEAN",
						"type": "bit"
					},
					{
						"name": "IsWETExempt",
						"type": "bit"
					},
					{
						"name": "BlackCode",
						"type": "nvarchar"
					},
					{
						"name": "RedCode",
						"type": "nvarchar"
					},
					{
						"name": "L4Customer",
						"type": "nvarchar"
					},
					{
						"name": "L5Customer",
						"type": "nvarchar"
					},
					{
						"name": "SuppressionFlag",
						"type": "nvarchar"
					},
					{
						"name": "SalesFlag",
						"type": "nvarchar"
					},
					{
						"name": "L4CustomerName",
						"type": "nvarchar"
					},
					{
						"name": "L5CustomerName",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryTransactionCode",
						"type": "nvarchar"
					},
					{
						"name": "NationalOrOperation",
						"type": "nvarchar"
					},
					{
						"name": "ClusterFlagCode",
						"type": "nvarchar"
					},
					{
						"name": "LocationFlagDescription",
						"type": "nvarchar"
					},
					{
						"name": "SubClusterCode",
						"type": "nvarchar"
					},
					{
						"name": "SubClusterDescription",
						"type": "nvarchar"
					},
					{
						"name": "BankAccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CreditLimit",
						"type": "nvarchar"
					},
					{
						"name": "MaxOverdueGraceDay",
						"type": "nvarchar"
					},
					{
						"name": "SalesRoute",
						"type": "nvarchar"
					},
					{
						"name": "SM",
						"type": "nvarchar"
					},
					{
						"name": "GM",
						"type": "nvarchar"
					},
					{
						"name": "Area",
						"type": "nvarchar"
					},
					{
						"name": "MarketingMessages",
						"type": "nvarchar"
					},
					{
						"name": "LocationFlag",
						"type": "nvarchar"
					},
					{
						"name": "DSM",
						"type": "nvarchar"
					},
					{
						"name": "BU",
						"type": "nvarchar"
					},
					{
						"name": "Statloc",
						"type": "nvarchar"
					},
					{
						"name": "ClusterFlagDescription",
						"type": "nvarchar"
					},
					{
						"name": "DistCenter",
						"type": "nvarchar"
					},
					{
						"name": "IsDelete",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_DMS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SFTP_DMS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SFTP_DMS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_HR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SFTP_HR",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SFTP_HR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZipFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().deliminator",
						"type": "Expression"
					},
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2",
							"type": "LinkedServiceReference"
						},
						"secretName": "blob-Integration"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CoreFunction')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "https://corefunction.azurewebsites.net",
					"functionKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2",
							"type": "LinkedServiceReference"
						},
						"secretName": "core-function-host-key"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericAzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Secret": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().Secret",
							"type": "Expression"
						},
						"secretVersion": ""
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_DMS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "10.206.15.131",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "ccai",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2",
							"type": "LinkedServiceReference"
						},
						"secretName": "SFTP-DMS"
					}
				},
				"connectVia": {
					"referenceName": "IDCBTAP22",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_HR')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "167.103.49.25",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "devkronos",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2",
							"type": "LinkedServiceReference"
						},
						"secretName": "SFTP-HR-DEV"
					}
				},
				"connectVia": {
					"referenceName": "IDCBTAP22",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTaxFileSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "D:\\",
					"userId": "efakturid",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2",
							"type": "LinkedServiceReference"
						},
						"secretName": "eTax-Password",
						"secretVersion": ""
					}
				},
				"connectVia": {
					"referenceName": "IDCBTAP22",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowGDMPhotoTaking')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference"
							},
							"name": "SurveyTransaction"
						},
						{
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference"
							},
							"name": "Customers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "\n\nsource(output(\n\t\tSite as integer,\n\t\tSurveyTransactionId as long,\n\t\tApplicationSourceId as integer,\n\t\tGuid as string,\n\t\tSurveyId as integer,\n\t\tSurveyDescription as string,\n\t\tStartSurveyDateTime as string,\n\t\tEndSurveyDateTime as string,\n\t\tComment as string,\n\t\tCreatedDate as string,\n\t\tModifiedDate as string,\n\t\tSurveyType as string,\n\t\tFlagTransaction as string,\n\t\tTotalScore as double,\n\t\tCallHistoryGuid as string,\n\t\tReasonCode as string,\n\t\tReasonDescription as string,\n\t\tSurveyorId as integer,\n\t\tRespondentId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'Select * from VW_GDMPhotoTaking\\n',\n\tformat: 'query') ~> SurveyTransaction\nsource(output(\n\t\tNumber as string,\n\t\tName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'Select Number, Name from Customers',\n\tformat: 'query') ~> Customers\nSurveyTransaction sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "eTax File Management",
							"type": "PipelineReference"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2019-12-10T05:16:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/eTax File Management')]"
			]
		}
	]
}