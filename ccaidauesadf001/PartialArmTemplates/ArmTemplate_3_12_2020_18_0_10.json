{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ccaidauesadf001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Blob to SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Filename",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spDmsToCore_GetFilename]",
								"storedProcedureParameters": {
									"Filename": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Filename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": {
										"value": "Config",
										"type": "Expression"
									},
									"secret": {
										"value": "@pipeline().parameters.secretConfiguration",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "If File Found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Lookup Filename').output,'firstrow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Backup file",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "FileInBlob_roam_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceFolder",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FileInBlob_roam_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.backupFolder,'/Others/',formatDateTime(utcnow(),'yyyyMMdd'))",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Source File",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup file",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileInBlob_roam_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceFolder",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Backup file dms",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy CSV to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "FileInBlob_roam_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceFolder",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FileInBlob_roam_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.backupFolder,'/',activity('Lookup Filename').output.firstrow.BackupFolder,'/',formatDateTime(convertFromUtc(utcnow(),'SE Asia Standard Time'),'yyyyMMdd'))",
													"type": "Expression"
												},
												"file": {
													"value": "@concat(formatDateTime(convertFromUtc(utcnow(),'SE Asia Standard Time'),'yyyyMMdd_hhmmss'),'_',pipeline().parameters.Filename)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete Source File dms",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Backup file dms",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileInBlob_roam_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceFolder",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "Copy CSV to Staging",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ZipFile_roam_dev",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.sourceContainer",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceFolder",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.Filename",
													"type": "Expression"
												},
												"deliminator": {
													"value": "|",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@activity('Lookup Filename').output.firstrow.StagingTable",
													"type": "Expression"
												},
												"secret": {
													"value": "@activity('Lookup Filename').output.firstrow.TargetKeySecret",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "If Load SP not blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If File Found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(contains(activity('Lookup Filename').output,'firstrow'),not(equals(activity('Lookup Filename').output.firstrow.LoadSP,'')))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Run Load SP",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@activity('Lookup Filename').output.firstrow.LoadSP",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@activity('Lookup Filename').output.firstrow.TargetKeySecret",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"sourceContainer": {
						"type": "string",
						"defaultValue": "dms"
					},
					"sourceFolder": {
						"type": "string",
						"defaultValue": "Unprocessed"
					},
					"backupFolder": {
						"type": "string",
						"defaultValue": "History"
					},
					"Filename": {
						"type": "string"
					},
					"secretConfiguration": {
						"type": "string",
						"defaultValue": "azure-sql-prd-core"
					}
				},
				"variables": {
					"new": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZipFile_roam_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZipFile_roam_dev')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobROAM_dev",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().deliminator",
						"type": "Expression"
					},
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}