{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ccaidauesadf001"
		},
		"IDCBTIN22_Root_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'IDCBTIN22_Root'"
		},
		"IDCBTIN22_Root_PRODUCTION_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'IDCBTIN22_Root_PRODUCTION'"
		},
		"IR2_CDE_DEV_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IR2_CDE_DEV'"
		},
		"IR2_CDE_QA_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IR2_CDE_QA'"
		},
		"IR2_CORE_DEV_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IR2_CORE_DEV'"
		},
		"IR2_CORE_PRODUCTION_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IR2_CORE_PRODUCTION'"
		},
		"IR2_CORE_QA_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IR2_CORE_QA'"
		},
		"IR2_MASTERDATA_PRODUCTION_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IR2_MASTERDATA_PRODUCTION'"
		},
		"IR2_MASTERDATA_QA_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IR2_MASTERDATA_QA'"
		},
		"IR2_REPORT_PRODUCTION_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IR2_REPORT_PRODUCTION'"
		},
		"IR2_SALES_DEV_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IR2_SALES_DEV'"
		},
		"IaaS_MASTERDATA_PRODUCTION_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IaaS_MASTERDATA_PRODUCTION'"
		},
		"IaaS_SALES_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IaaS_SALES'"
		},
		"IaaS_SALES_PRODUCTION_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'IaaS_SALES_PRODUCTION'"
		},
		"PaaS_REDCoaching_Production_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'PaaS_REDCoaching_Production'"
		},
		"AKV_IR2_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ir2-dev-key-vault.vault.azure.net/"
		},
		"AKV_IR2_PRD_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ccaidauesprdkeyvault001.vault.azure.net/"
		},
		"AzureBlobStorage1_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "blob-Integration"
		},
		"GenericAzureSqlDatabase_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().Secret"
		},
		"GenericSqlServer_CCAIDWPRDB004_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().secret"
		},
		"IDCBTIN22_Root_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\IDCBTIN22\\root"
		},
		"IDCBTIN22_Root_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "ausdom\\svc_sasql_id"
		},
		"IDCBTIN22_Root_PRODUCTION_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "\\\\IDCBTIN22\\Root"
		},
		"IDCBTIN22_Root_PRODUCTION_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "ausdom\\svc_sasql_id"
		},
		"IR2KeyVault_LinkedService_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://IR2-DevTestKeyVault.vault.azure.net/"
		},
		"IR2_MASTERDATA_DEV_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ccaidauesdevmasterdatadb001-secret"
		},
		"SFTP_DMS_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "10.206.15.131"
		},
		"SFTP_DMS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "ccai"
		},
		"SFTP_HR_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "167.103.49.25"
		},
		"SFTP_HR_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "devkronos"
		},
		"eTaxFileSource_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "D:\\"
		},
		"eTaxFileSource_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "efakturid"
		},
		"Daily Run Trigger - 1 am _ 1 pm_properties_Integration Run SP_parameters_triggerGroup": {
			"type": "string",
			"defaultValue": "D-1;13"
		},
		"Daily Run Trigger Master Data - 1 am_properties_Integration Copy Data_parameters_TriggerGroup": {
			"type": "string",
			"defaultValue": "M-D-1"
		},
		"Daily Run Trigger Master Data - 3 am_properties_Integration Copy Data_parameters_TriggerGroup": {
			"type": "string",
			"defaultValue": "M-D-3"
		},
		"Daily Run Trigger Trx - 1 am_properties_SAM Users_parameters_SyncDataFrom": {
			"type": "string",
			"defaultValue": "-"
		},
		"Daily Run Trigger Trx - 1 am_properties_SAM Users_parameters_SyncDataTo": {
			"type": "string",
			"defaultValue": "-"
		},
		"Daily Run Trigger Trx - 1 am_properties_SAM Survey Transaction All_parameters_SyncDataFrom": {
			"type": "string",
			"defaultValue": "-"
		},
		"Daily Run Trigger Trx - 1 am_properties_SAM Survey Transaction All_parameters_SyncDataTo": {
			"type": "string",
			"defaultValue": "-"
		},
		"Daily Run Trigger Trx - 1 am_properties_Integration Copy Data_parameters_TriggerGroup": {
			"type": "string",
			"defaultValue": "T-D-1"
		},
		"Daily Run Trigger Trx - 1 am_properties_Integration Run SP_parameters_triggerGroup": {
			"type": "string",
			"defaultValue": "D-1"
		},
		"Daily Run Trigger Trx - 2 am_properties_Integration Copy Data_parameters_TriggerGroup": {
			"type": "string",
			"defaultValue": "T-D-2"
		},
		"Daily Run Trigger Trx - 3 am_properties_Integration Copy Data_parameters_TriggerGroup": {
			"type": "string",
			"defaultValue": "T-D-3"
		},
		"Daily Run Trigger Trx - 4 am_properties_Integration Copy Data_parameters_TriggerGroup": {
			"type": "string",
			"defaultValue": "T-D-4"
		},
		"eTax_properties_eTax 1 File Management_parameters_directory": {
			"type": "string",
			"defaultValue": "VAT Output 2\\VAT Output 3"
		},
		"eTax_properties_eTax 3 Send Email_parameters_sourceDirectory": {
			"type": "string",
			"defaultValue": "VAT Output 2\\VAT Output 3"
		},
		"eTax_properties_eTax 4 Read Status_parameters_sourceDirectory": {
			"type": "string",
			"defaultValue": "VAT Output 2\\VAT Output 3"
		},
		"integrationRuntime-SSIS-CCAIDWPRDDB004_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint": {
			"type": "string",
			"defaultValue": "ccaidauesprdir2dbsrv01.database.windows.net"
		},
		"integrationRuntime-SSIS-CCAIDWPRDDB004_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName": {
			"type": "string",
			"defaultValue": "svc_sasql_id"
		},
		"integrationRuntime-SSIS-CCAIDWPRDDB004_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword": {
			"type": "secureString"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CORE_DeleteNotification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CORE_DeleteNotification",
						"description": "Delete Notification Expired Password in CORE",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_DeleteNotification]"
						},
						"linkedServiceName": {
							"referenceName": "IR2_CORE_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_CORE_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV - Report SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy CSV (Zipped) to SQL from blob storage",
				"activities": [
					{
						"name": "List All Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Guid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "Integration_FromCSV",
									"secret": {
										"value": "@variables('secretIntegrationMaster')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Integration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List All Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List All Data').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy blob to SQL Report",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Switch to copy CSV in SFTP to Blob Storage",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy CSV to SQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"container": {
												"value": "@item().container",
												"type": "Expression"
											},
											"directory": {
												"value": "@item().sourceDirectory",
												"type": "Expression"
											},
											"file": {
												"value": "@item().sourceFilename",
												"type": "Expression"
											},
											"deliminator": {
												"value": "@item().deliminator",
												"type": "Expression"
											},
											"staggingTable": {
												"value": "@item().staggingTable",
												"type": "Expression"
											},
											"secret": {
												"value": "@item().keyVaultSQL",
												"type": "Expression"
											},
											"isTruncate": {
												"value": "@bool('true')",
												"type": "Expression"
											},
											"isZipped": {
												"value": "@bool(item().isZipped)",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "move to success folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Run Store Procedure to move to final table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move in Blob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"container": {
												"value": "@item().container",
												"type": "Expression"
											},
											"sourceDirectory": {
												"value": "@item().sourceDirectory",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@item().sourceFilename",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(item().backupDirectory,'/success/',formatDateTime(addhours(utcnow(),7),'yyyyMMdd'))",
												"type": "Expression"
											},
											"targetFile": {
												"value": "@concat(formatDateTime(addhours(utcnow(),7),'yyyyMMdd_hhmmss_'),item().sourceFilename)",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								},
								{
									"name": "move to fail folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Run Store Procedure to move to final table",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move in Blob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"container": {
												"value": "@item().container",
												"type": "Expression"
											},
											"sourceDirectory": {
												"value": "@item().sourceDirectory",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@item().sourceFilename",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(item().backupDirectory,'/fail/',formatDateTime(addhours(utcnow(),7),'yyyyMMdd'))",
												"type": "Expression"
											},
											"targetFile": {
												"value": "@concat(formatDateTime(addhours(utcnow(),7),'yyyyMMdd_hhmmss_'),item().sourceFilename)",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								},
								{
									"name": "Run Store Procedure to move to final table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy blob to SQL Report",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().spProcessData",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@item().keyVaultSQL",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log when copy error",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy blob to SQL Report",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@variables('spLog')",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"Guid": {
												"value": {
													"value": "@variables('idIntegration')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IntegrationName": {
												"value": {
													"value": "@item().IntegrationName",
													"type": "Expression"
												},
												"type": "String"
											},
											"IntegrationTime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTimeOffset"
											},
											"Message": {
												"value": {
													"value": "@string(activity('Copy blob to SQL Report').error)",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "error",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@variables('secretIntegrationMaster')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log when run Store Procedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Run Store Procedure to move to final table",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@variables('spLog')",
											"type": "Expression"
										},
										"storedProcedureParameters": {
											"Guid": {
												"value": {
													"value": "@variables('idIntegration')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IntegrationName": {
												"value": {
													"value": "@item().IntegrationName",
													"type": "Expression"
												},
												"type": "String"
											},
											"IntegrationTime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTimeOffset"
											},
											"Message": {
												"value": {
													"value": "@string(activity('Run Store Procedure to move to final table').error)",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": "error",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@variables('secretIntegrationMaster')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Switch to copy CSV in SFTP to Blob Storage",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().SFTP",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "SFTP_DMS",
												"activities": [
													{
														"name": "Copy CSV from SFTP DMS to Blob",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "SftpReadSettings",
																	"recursive": true
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SFTP_DMS",
																"type": "DatasetReference",
																"parameters": {
																	"directory": {
																		"value": "@item().SFTP_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().sourceFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "FileInBlob",
																"type": "DatasetReference",
																"parameters": {
																	"container": {
																		"value": "@item().container",
																		"type": "Expression"
																	},
																	"directory": {
																		"value": "@item().sourceDirectory",
																		"type": "Expression"
																	},
																	"file": {
																		"value": "@item().sourceFilename",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "SFTP_HR",
												"activities": [
													{
														"name": "Copy CSV from SFTP HR to Blob",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "BinarySource",
																"storeSettings": {
																	"type": "SftpReadSettings",
																	"recursive": true
																}
															},
															"sink": {
																"type": "BinarySink",
																"storeSettings": {
																	"type": "AzureBlobStorageWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "SFTP_HR",
																"type": "DatasetReference",
																"parameters": {
																	"directory": {
																		"value": "@item().SFTP_Directory",
																		"type": "Expression"
																	},
																	"filename": {
																		"value": "@item().sourceFilename",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "FileInBlob",
																"type": "DatasetReference",
																"parameters": {
																	"container": {
																		"value": "@item().container",
																		"type": "Expression"
																	},
																	"directory": {
																		"value": "@item().sourceDirectory",
																		"type": "Expression"
																	},
																	"file": {
																		"value": "@item().sourceFilename",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										]
									}
								},
								{
									"name": "move to fail folder_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Copy blob to SQL Report",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move in Blob",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"container": {
												"value": "@item().container",
												"type": "Expression"
											},
											"sourceDirectory": {
												"value": "@item().sourceDirectory",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@item().sourceFilename",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(item().backupDirectory,'/fail/',formatDateTime(addhours(utcnow(),7),'yyyyMMdd'))",
												"type": "Expression"
											},
											"targetFile": {
												"value": "@concat(formatDateTime(addhours(utcnow(),7),'yyyyMMdd_hhmmss_'),item().sourceFilename)",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								}
							]
						}
					},
					{
						"name": "Log error message when look up",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "List All Data",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('spLog')",
								"type": "Expression"
							},
							"storedProcedureParameters": {
								"Guid": {
									"value": {
										"value": "@variables('idIntegration')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IntegrationName": {
									"value": "List Integration Master",
									"type": "String"
								},
								"IntegrationTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Message": {
									"value": {
										"value": "@string(activity('List All Data').error)",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": "error",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "GenericAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"Secret": {
									"value": "@variables('secretIntegrationMaster')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set Guid",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "idIntegration",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"secretIntegrationMaster": {
						"type": "String",
						"defaultValue": "azure-sql-prd-report"
					},
					"tableIntegrationMaster": {
						"type": "String",
						"defaultValue": "Integration_FromCSV"
					},
					"spLog": {
						"type": "String",
						"defaultValue": "Integration_FromCSV_Log_Insert"
					},
					"idIntegration": {
						"type": "String"
					},
					"debug": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Production/Export To Reporting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/Copy CSV to SQL')]",
				"[concat(variables('factoryId'), '/pipelines/Copy or Move in Blob')]",
				"[concat(variables('factoryId'), '/datasets/SFTP_DMS')]",
				"[concat(variables('factoryId'), '/datasets/FileInBlob')]",
				"[concat(variables('factoryId'), '/datasets/SFTP_HR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Call Store Procedure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call Store Procedure",
						"description": "Integrate from Customer to SalesOffice",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@pipeline().parameters.storeprocedure",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "GenericAzureSqlDatabase",
							"type": "LinkedServiceReference",
							"parameters": {
								"Secret": {
									"value": "@pipeline().parameters.secret",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"secret": {
						"type": "string",
						"defaultValue": "azure-sql-dev-masterdata"
					},
					"storeprocedure": {
						"type": "string",
						"defaultValue": "usp_IntegrationSalesOffice"
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy CSV to SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy CSV (Zipped) to SQL from blob storage",
				"activities": [
					{
						"name": "If file zipped",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.isZipped",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy csv to sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{if(pipeline().parameters.isTruncate,concat('IF OBJECT_ID (N''',pipeline().parameters.staggingTable,''', N''U'') IS NOT NULL TRUNCATE TABLE ',pipeline().parameters.staggingTable),'')}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "CsvFile",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.file",
													"type": "Expression"
												},
												"deliminator": {
													"value": "@pipeline().parameters.deliminator",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@pipeline().parameters.staggingTable",
													"type": "Expression"
												},
												"secret": {
													"value": "@pipeline().parameters.secret",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy zip to sql",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{if(pipeline().parameters.isTruncate,concat('IF OBJECT_ID (N''',pipeline().parameters.staggingTable,''', N''U'') IS NOT NULL TRUNCATE TABLE ',pipeline().parameters.staggingTable),'')}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ZipFile",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.file",
													"type": "Expression"
												},
												"deliminator": {
													"value": "@pipeline().parameters.deliminator",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@pipeline().parameters.staggingTable",
													"type": "Expression"
												},
												"secret": {
													"value": "@pipeline().parameters.secret",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					},
					"staggingTable": {
						"type": "string"
					},
					"secret": {
						"type": "string"
					},
					"isTruncate": {
						"type": "bool"
					},
					"isZipped": {
						"type": "bool"
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CsvFile')]",
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/ZipFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy SQL to SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch is source Type and target table exists",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Target Database Type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@concat(pipeline().parameters.sourceDbType,'-',pipeline().parameters.sourceDbType,'-',variables('isExists'))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "PaaS-PaaS-True",
									"activities": [
										{
											"name": "Copy PaaS to PaaS w Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "AzureSqlSink",
													"preCopyScript": {
														"value": "@{concat('TRUNCATE TABLE ', pipeline().parameters.targetTable)}",
														"type": "Expression"
													},
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "PaaS-PaaS-False",
									"activities": [
										{
											"name": "Copy PaaS to PaaS wo Truncate",
											"description": "Copy without truncate first",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "AzureSqlSink",
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-PaaS-True",
									"activities": [
										{
											"name": "Copy IaaS to PaaS w Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "AzureSqlSink",
													"preCopyScript": {
														"value": "@{concat('TRUNCATE TABLE ', pipeline().parameters.targetTable)}",
														"type": "Expression"
													},
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-PaaS-False",
									"activities": [
										{
											"name": "Copy IaaS to PaaS wo Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "AzureSqlSink",
													"tableOption": "autoCreate",
													"disableMetricsCollection": false
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-IaaS-True",
									"activities": [
										{
											"name": "Copy IaaS to IaaS w Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "SqlServerSink",
													"preCopyScript": {
														"value": "@{concat('TRUNCATE TABLE ', pipeline().parameters.targetTable)}",
														"type": "Expression"
													},
													"tableOption": "autoCreate"
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "IaaS-IaaS-False",
									"activities": [
										{
											"name": "Copy IaaS to IaaS wo Truncate",
											"description": "Truncate before copy",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"queryTimeout": "02:00:00"
												},
												"sink": {
													"type": "SqlServerSink",
													"tableOption": "autoCreate"
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.sourceSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.sourceTable",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					},
					{
						"name": "Target Database Type",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.targetDbType",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "PaaS",
									"activities": [
										{
											"name": "Check IsExists Target Table PaaS",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "GenericAzureSQLDatabase",
													"type": "DatasetReference",
													"parameters": {
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														},
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"exists"
												]
											}
										},
										{
											"name": "Set isExists PaaS",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Check IsExists Target Table PaaS",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "isExists",
												"value": {
													"value": "@string(activity('Check IsExists Target Table PaaS').output.exists)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "IaaS",
									"activities": [
										{
											"name": "Check IsExists Target Table IaaS",
											"type": "GetMetadata",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"dataset": {
													"referenceName": "GenericSqlServer_CCAIDWPRDB004",
													"type": "DatasetReference",
													"parameters": {
														"secret": {
															"value": "@pipeline().parameters.targetSecret",
															"type": "Expression"
														},
														"table": {
															"value": "@pipeline().parameters.targetTable",
															"type": "Expression"
														}
													}
												},
												"fieldList": [
													"exists"
												]
											}
										},
										{
											"name": "Set isExists IaaS",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Check IsExists Target Table IaaS",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "isExists",
												"value": {
													"value": "@string(activity('Check IsExists Target Table IaaS').output.exists)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"sourceSecret": {
						"type": "string"
					},
					"sourceTable": {
						"type": "string"
					},
					"sourceDbType": {
						"type": "string",
						"defaultValue": "PaaS"
					},
					"targetSecret": {
						"type": "string"
					},
					"targetTable": {
						"type": "string"
					},
					"targetDbType": {
						"type": "string",
						"defaultValue": "PaaS"
					}
				},
				"variables": {
					"isExists": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/GenericSqlServer_CCAIDWPRDB004')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy or Move File idcbtap22')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to target",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.sourceFilename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.targetDirectory",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.targetFilename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "If isMove then delete source file",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy data to target",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.isMove",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete source file",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "File_in_idcbtap22",
											"type": "DatasetReference",
											"parameters": {
												"directory": {
													"value": "@pipeline().parameters.sourceDirectory",
													"type": "Expression"
												},
												"filename": {
													"value": "@pipeline().parameters.sourceFilename",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"sourceDirectory": {
						"type": "string"
					},
					"sourceFilename": {
						"type": "string"
					},
					"targetDirectory": {
						"type": "string"
					},
					"targetFilename": {
						"type": "string"
					},
					"isMove": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/File_in_idcbtap22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy or Move in Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy CSV (Zipped) to SQL from blob storage",
				"activities": [
					{
						"name": "Copy Blob to Success folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "FileInBlob",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.sourceDirectory",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.sourceFile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "FileInBlob",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.targetDirectory",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.targetFile",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "If isMove then delete source file",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Copy Blob to Success folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.isMove",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete source file",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileInBlob",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceDirectory",
													"type": "Expression"
												},
												"file": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"container": {
						"type": "string"
					},
					"sourceDirectory": {
						"type": "string"
					},
					"sourceFile": {
						"type": "string"
					},
					"targetDirectory": {
						"type": "string"
					},
					"targetFile": {
						"type": "string"
					},
					"isMove": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FileInBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete CallHistory By PinId')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored Procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_DeleteOldCallHistoryByPinId]",
							"storedProcedureParameters": {
								"PinId": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IaaS_SALES_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IaaS_SALES_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteOldLogSyncs_CCASitecore_Custom')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored Procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_DeleteOldLogSyncs]"
						},
						"linkedServiceName": {
							"referenceName": "IaaS_SALES_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IaaS_SALES_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Export SAM to Report')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute SAM Users",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SAM Users",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SyncDataFrom": {
									"value": "@pipeline().parameters.SyncFromDate",
									"type": "Expression"
								},
								"SyncDataTo": {
									"value": "@pipeline().parameters.SyncToDate",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute SAM Call History",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute SAM Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SAM Call History",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SyncDataFrom": {
									"value": "@pipeline().parameters.SyncFromDate",
									"type": "Expression"
								},
								"SyncDataTo": {
									"value": "@pipeline().parameters.SyncToDate",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute SAM Call History Detail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute SAM Call History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SAM Call History Detail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SyncDataFrom": {
									"value": "@pipeline().parameters.SyncFromDate",
									"type": "Expression"
								},
								"SyncDataTo": {
									"value": "@pipeline().parameters.SyncToDate",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute SAM Survey Transaction",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute SAM Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SAM Survey Transaction",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SyncDataFrom": {
									"value": "@pipeline().parameters.SyncFromDate",
									"type": "Expression"
								},
								"SyncDataTo": {
									"value": "@pipeline().parameters.SyncToDate",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute SAM Survey Answer",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute SAM Survey Transaction",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SAM Survey Transaction Answer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SyncDataFrom": {
									"value": "@pipeline().parameters.SyncFromDate",
									"type": "Expression"
								},
								"SyncDataTo": {
									"value": "@pipeline().parameters.SyncToDate",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"SyncFromDate": {
						"type": "string",
						"defaultValue": "2019-08-01"
					},
					"SyncToDate": {
						"type": "string",
						"defaultValue": "2019-08-28"
					}
				},
				"folder": {
					"name": "Production/Export To Reporting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SAM Users')]",
				"[concat(variables('factoryId'), '/pipelines/SAM Call History')]",
				"[concat(variables('factoryId'), '/pipelines/SAM Call History Detail')]",
				"[concat(variables('factoryId'), '/pipelines/SAM Survey Transaction')]",
				"[concat(variables('factoryId'), '/pipelines/SAM Survey Transaction Answer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Integration Copy Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get Table to copy",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "spIntegration_Configurations",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"TriggerGroup": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TriggerGroup",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": {
										"value": "IntegrationConfigurations",
										"type": "Expression"
									},
									"secret": {
										"value": "@variables('secretConfiguration')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get Table to copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get Table to copy').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Copy SQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy SQL to SQL",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceSecret": {
												"value": "@item().SourceSecret",
												"type": "Expression"
											},
											"sourceTable": {
												"value": "@item().SourceTable",
												"type": "Expression"
											},
											"sourceDbType": {
												"value": "@item().SourceDatabaseType",
												"type": "Expression"
											},
											"targetSecret": {
												"value": "@item().TargetSecret",
												"type": "Expression"
											},
											"targetTable": {
												"value": "@item().TargetTable",
												"type": "Expression"
											},
											"targetDbType": {
												"value": "@item().TargetDatabaseType",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Send Email fail to copy",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Copy SQL",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('Integration FAILED - [', pipeline().RunId,'] - ', item().SourceTable, ' is error when copy file')",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This Integration when copy from ', item().SourceTable, ' into ', item().TargetTable)",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								},
								{
									"name": "If Store Procedure is not blank",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Execute Copy SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(item().StoreProcedureProcess,''))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Proses data after copy",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": {
														"value": "@item().StoreProcedureProcess",
														"type": "Expression"
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": {
															"value": "@item().TargetSecret",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Execute Send Email success",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Proses data after copy",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Sending Email",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"from": {
															"value": "@variables('emailFrom')",
															"type": "Expression"
														},
														"to": {
															"value": "@variables('emailTo')",
															"type": "Expression"
														},
														"message_id": {
															"value": "@guid()",
															"type": "Expression"
														},
														"subject": {
															"value": "@concat('Integration SUCCESS - [', pipeline().RunId,'] - ', item().SourceTable, ' is success')",
															"type": "Expression"
														},
														"content": {
															"value": "@concat('Hi, This Integration ', item().SourceTable, ' is success')",
															"type": "Expression"
														},
														"Queue_id": {
															"value": "@variables('emailQueue')",
															"type": "Expression"
														},
														"cc": {
															"value": "@variables('emailCc')",
															"type": "Expression"
														},
														"bcc": {
															"value": "@variables('emailBcc')",
															"type": "Expression"
														},
														"attachments": " "
													}
												}
											},
											{
												"name": "Execute Send Email fail to process",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Proses data after copy",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Sending Email",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"from": {
															"value": "@variables('emailFrom')",
															"type": "Expression"
														},
														"to": {
															"value": "@variables('emailTo')",
															"type": "Expression"
														},
														"message_id": {
															"value": "@guid()",
															"type": "Expression"
														},
														"subject": {
															"value": "@concat('Integration FAILED - [', pipeline().RunId,'] - ', item().SourceTable, ' is failed when process ', item().StoreProcedureProcess)",
															"type": "Expression"
														},
														"content": {
															"value": "@concat('Hi, This Integration ', item().SourceTable, ' is success')",
															"type": "Expression"
														},
														"Queue_id": {
															"value": "@variables('emailQueue')",
															"type": "Expression"
														},
														"cc": {
															"value": "@variables('emailCc')",
															"type": "Expression"
														},
														"bcc": {
															"value": "@variables('emailBcc')",
															"type": "Expression"
														},
														"attachments": " "
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"TriggerGroup": {
						"type": "string"
					}
				},
				"variables": {
					"secretConfiguration": {
						"type": "String",
						"defaultValue": "azure-sql-prd-report"
					},
					"emailTo": {
						"type": "String",
						"defaultValue": "andreas.herrinto@ccamatil.com"
					},
					"emailCc": {
						"type": "String"
					},
					"emailBcc": {
						"type": "String"
					},
					"emailFrom": {
						"type": "String",
						"defaultValue": "idn.adf.ReportIntegration@ccamatil.com"
					},
					"emailQueue": {
						"type": "String",
						"defaultValue": "664CDAFA44B642DDB511046AFC2C732A"
					}
				},
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/Copy SQL to SQL')]",
				"[concat(variables('factoryId'), '/pipelines/Sending Email')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Integration Run SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get Table to copy",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "spIntegration_SPConfigurations",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"TriggerGroup": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.triggerGroup",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": {
										"value": "IntegrationSPConfigurations",
										"type": "Expression"
									},
									"secret": {
										"value": "@variables('secretConfiguration')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get Table to copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get Table to copy').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Copy SQL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Call Store Procedure",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"secret": {
												"value": "@item().SecretDatabase",
												"type": "Expression"
											},
											"storeprocedure": {
												"value": "@item().StoreProcedureProcess",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Send Email success",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Copy SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('Integration SUCCESS -  [', pipeline().RunId,'] - ', item().StoreProcedureProcess, ' is success')",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This Integration ', item().StoreProcedureProcess, ' is success')",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								},
								{
									"name": "Execute Send Email fail to copy",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Copy SQL",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Sending Email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"from": {
												"value": "@variables('emailFrom')",
												"type": "Expression"
											},
											"to": {
												"value": "@variables('emailTo')",
												"type": "Expression"
											},
											"message_id": {
												"value": "@guid()",
												"type": "Expression"
											},
											"subject": {
												"value": "@concat('Integration Run SP - FAILED - [', pipeline().RunId,'] - ', item().StoreProcedureProcess, ' is error when run store procedure')",
												"type": "Expression"
											},
											"content": {
												"value": "@concat('Hi, This Integration run SP ', item().StoreProcedureProcess, ' is failed')",
												"type": "Expression"
											},
											"Queue_id": {
												"value": "@variables('emailQueue')",
												"type": "Expression"
											},
											"cc": {
												"value": "@variables('emailCc')",
												"type": "Expression"
											},
											"bcc": {
												"value": "@variables('emailBcc')",
												"type": "Expression"
											},
											"attachments": " "
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"triggerGroup": {
						"type": "string"
					}
				},
				"variables": {
					"secretConfiguration": {
						"type": "String",
						"defaultValue": "azure-sql-prd-report"
					},
					"emailFrom": {
						"type": "String",
						"defaultValue": "idn.adf.ReportIntegration@ccamatil.com"
					},
					"emailTo": {
						"type": "String",
						"defaultValue": "andreas.herrinto@ccamatil.com"
					},
					"emailCc": {
						"type": "String",
						"defaultValue": "siska.limanto@ccamatil.com"
					},
					"emailBcc": {
						"type": "String"
					},
					"emailQueue": {
						"type": "String",
						"defaultValue": "664CDAFA44B642DDB511046AFC2C732A"
					}
				},
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/Call Store Procedure')]",
				"[concat(variables('factoryId'), '/pipelines/Sending Email')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MD_BUSalesStructure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from IaaS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "if to Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If from Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spExport_SM_REF_BU_SR_STRUCTURE]",
								"storedProcedureParameters": {
									"SyncFromDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataFrom')",
											"type": "Expression"
										}
									},
									"SyncToDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataTo')",
											"type": "Expression"
										}
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[spMD_SM_REF_BU_SR_STRUCTURE_Upsert]",
								"sqlWriterTableType": "typeMD_SM_REF_BU_SR_STRUCTURE",
								"storedProcedureTableTypeParameterName": "MD_SM_REF_BU_SR_STRUCTURE"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32"
										},
										"sink": {
											"name": "ID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "PERIOD",
											"type": "String"
										},
										"sink": {
											"name": "PERIOD",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SR_CODE",
											"type": "String"
										},
										"sink": {
											"name": "SR_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SR_NAME",
											"type": "String"
										},
										"sink": {
											"name": "SR_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DSM_CODE",
											"type": "String"
										},
										"sink": {
											"name": "DSM_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DSM_NAME",
											"type": "String"
										},
										"sink": {
											"name": "DSM_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SM_CODE",
											"type": "String"
										},
										"sink": {
											"name": "SM_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SM_DESC",
											"type": "String"
										},
										"sink": {
											"name": "SM_DESC",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SM_NAME",
											"type": "String"
										},
										"sink": {
											"name": "SM_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "GM_CODE",
											"type": "String"
										},
										"sink": {
											"name": "GM_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "GM_DESC",
											"type": "String"
										},
										"sink": {
											"name": "GM_DESC",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "GM_NAME",
											"type": "String"
										},
										"sink": {
											"name": "GM_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SLSGRP_CODE",
											"type": "String"
										},
										"sink": {
											"name": "SLSGRP_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SLSGRP_DESC",
											"type": "String"
										},
										"sink": {
											"name": "SLSGRP_DESC",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SLSGRP_NAME",
											"type": "String"
										},
										"sink": {
											"name": "SLSGRP_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BU_CODE",
											"type": "String"
										},
										"sink": {
											"name": "BU_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BU_DESC",
											"type": "String"
										},
										"sink": {
											"name": "BU_DESC",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BU_NAME",
											"type": "String"
										},
										"sink": {
											"name": "BU_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BUSINESS_UNIT_GROUP_CODE",
											"type": "String"
										},
										"sink": {
											"name": "BUSINESS_UNIT_GROUP_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BUSINESS_UNIT_GROUP_DESC",
											"type": "String"
										},
										"sink": {
											"name": "BUSINESS_UNIT_GROUP_DESC",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TOTAL_CCAI",
											"type": "String"
										},
										"sink": {
											"name": "TOTAL_CCAI",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FLAG_KAM",
											"type": "String"
										},
										"sink": {
											"name": "FLAG_KAM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FLAG_ACTIVE",
											"type": "String"
										},
										"sink": {
											"name": "FLAG_ACTIVE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FLAG_MDS",
											"type": "String"
										},
										"sink": {
											"name": "FLAG_MDS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LastUpdatedECoaching",
											"type": "String"
										},
										"sink": {
											"name": "LastUpdatedECoaching",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LastUpdatedDateTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "LastUpdatedDateTime",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Production_MasterData_IaaS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Production_Report_SAM_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Last Sync Date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": {
										"value": "@activity('Copy from IaaS').output.executionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": {
										"value": "@activity('Copy from IaaS').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Error Message",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@activity('Copy from IaaS').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": "Error",
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup Sync Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spImportFromSAM_GetLastSyncDate]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@variables('TableName')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "Production_Report_SAM_Customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If from Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataFrom, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataFrom from parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@pipeline().parameters.SyncDataFrom",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncFromData from Table",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@activity('Lookup Sync Date').output.firstrow.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "if to Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataTo, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataTo from Parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@pipeline().parameters.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncDataTo from Table",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@activity('Lookup Sync Date').output.firstrow.NowTime",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SyncDataFrom": {
						"type": "string",
						"defaultValue": "-"
					},
					"SyncDataTo": {
						"type": "string",
						"defaultValue": "-"
					}
				},
				"variables": {
					"TableName": {
						"type": "String",
						"defaultValue": "MD_SM_REF_BU_SR_STRUCTURE"
					},
					"SyncDataFrom": {
						"type": "String"
					},
					"SyncDataTo": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Production/Export To Reporting/from MD"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Production_MasterData_IaaS')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Users')]",
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OHS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Send User Gps",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "SftpReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('TRUNCATE TABLE ', variables('TargetSendGps'))}",
									"type": "Expression"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ZipInSFTP",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@variables('SFTP_Folder')",
										"type": "Expression"
									},
									"filename": {
										"value": "@variables('SFTP_Filename')",
										"type": "Expression"
									},
									"column_deliminator": {
										"value": "|",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "GenericSqlServer_CCAIDWPRDB004",
								"type": "DatasetReference",
								"parameters": {
									"secret": {
										"value": "@variables('secret_bi_db')",
										"type": "Expression"
									},
									"table": {
										"value": "@variables('TargetSendGps')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy Ride",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": {
									"value": "@variables('SourceRideMe')",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"SurveyDate": {
										"type": "Datetime",
										"value": {
											"value": "@adddays(utcnow('yyyy-MM-dd'),0)",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('TRUNCATE TABLE ', variables('TargetRideMe'))}",
									"type": "Expression"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "GenericSqlServer_CCAIDWPRDB004",
								"type": "DatasetReference",
								"parameters": {
									"secret": {
										"value": "@variables('secret_sls_iaas_db')",
										"type": "Expression"
									},
									"table": {
										"value": "@variables('SourceRideMe')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "GenericSqlServer_CCAIDWPRDB004",
								"type": "DatasetReference",
								"parameters": {
									"secret": {
										"value": "@variables('secret_bi_db')",
										"type": "Expression"
									},
									"table": {
										"value": "@variables('TargetRideMe')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"variables": {
					"secret_bi_db": {
						"type": "String",
						"defaultValue": "idwpid23-sql-dev-bi"
					},
					"secret_survey_db": {
						"type": "String"
					},
					"secret_sls_iaas_db": {
						"type": "String",
						"defaultValue": "004-sql-prd-sales"
					},
					"TargetSendGps": {
						"type": "String",
						"defaultValue": "HR_TMP_OHSSpeed_Send_User_GPS"
					},
					"TargetRideMe": {
						"type": "String",
						"defaultValue": "HR_TMP_OHS_SalesRpt_Survey"
					},
					"SFTP_Folder": {
						"type": "String",
						"defaultValue": "/FromBasis"
					},
					"SFTP_Filename": {
						"type": "String",
						"defaultValue": "SendUserGps.zip"
					},
					"SourceRideMe": {
						"type": "String",
						"defaultValue": "spBI_RideMe"
					}
				},
				"folder": {
					"name": "Development"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ZipInSFTP')]",
				"[concat(variables('factoryId'), '/datasets/GenericSqlServer_CCAIDWPRDB004')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SAM Call History All')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from IaaS",
						"description": "Copy Call History",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "if to Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If from Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spExport_CallHistory]",
								"storedProcedureParameters": {
									"SyncFromDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataFrom')",
											"type": "Expression"
										}
									},
									"SyncToDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataTo')",
											"type": "Expression"
										}
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[spSAM_CallHistory_upsert]",
								"sqlWriterTableType": "typeSAM_CallHistory",
								"storedProcedureTableTypeParameterName": "SAM_CallHistory"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CallHistoryId",
											"type": "Int32"
										},
										"sink": {
											"name": "CallHistoryId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "Int32"
										},
										"sink": {
											"name": "Site",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ScreenID",
											"type": "String"
										},
										"sink": {
											"name": "ScreenID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UserId",
											"type": "Guid"
										},
										"sink": {
											"name": "UserId",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "PinId",
											"type": "String"
										},
										"sink": {
											"name": "PinId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RouteId",
											"type": "String"
										},
										"sink": {
											"name": "RouteId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CustomerNumber",
											"type": "String"
										},
										"sink": {
											"name": "CustomerNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LocationCode",
											"type": "String"
										},
										"sink": {
											"name": "LocationCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "StartTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "StartTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "EndTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "EndTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Longitude",
											"type": "Double"
										},
										"sink": {
											"name": "Longitude",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Latitude",
											"type": "Double"
										},
										"sink": {
											"name": "Latitude",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Accuracy",
											"type": "Int32"
										},
										"sink": {
											"name": "Accuracy",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ScheduleTypeId",
											"type": "String"
										},
										"sink": {
											"name": "ScheduleTypeId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SystemStatus",
											"type": "Int32"
										},
										"sink": {
											"name": "SystemStatus",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CallStatus",
											"type": "String"
										},
										"sink": {
											"name": "CallStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CancelledReason",
											"type": "String"
										},
										"sink": {
											"name": "CancelledReason",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FollowSequence",
											"type": "Boolean"
										},
										"sink": {
											"name": "FollowSequence",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "RequestResequence",
											"type": "Boolean"
										},
										"sink": {
											"name": "RequestResequence",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "ProposeOutletBefore",
											"type": "Int32"
										},
										"sink": {
											"name": "ProposeOutletBefore",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ProposeOutletAfter",
											"type": "Int32"
										},
										"sink": {
											"name": "ProposeOutletAfter",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Remarks",
											"type": "String"
										},
										"sink": {
											"name": "Remarks",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UploadedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "UploadedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "SystemDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "SystemDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "OffSequenceReason",
											"type": "String"
										},
										"sink": {
											"name": "OffSequenceReason",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Guid",
											"type": "Guid"
										},
										"sink": {
											"name": "Guid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Production_Sales_IaaS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Production_Report_SAM_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Last Sync Date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": {
										"value": "@activity('Copy from IaaS').output.executionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": {
										"value": "@activity('Copy from IaaS').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Error Message",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@activity('Copy from IaaS').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": "Error",
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup Sync Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spImportFromSAM_GetLastSyncDate]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@variables('TableName')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "Production_Report_SAM_Customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If from Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataFrom, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataFrom from parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@pipeline().parameters.SyncDataFrom",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncFromData from Table",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@activity('Lookup Sync Date').output.firstrow.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "if to Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataTo, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataTo from Parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@pipeline().parameters.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncDataTo from now function",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy from IaaS Detail",
						"description": "Copy Call History Detail",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Last Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spExport_CallHistoryDetail]",
								"storedProcedureParameters": {
									"SyncFromDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataFrom')",
											"type": "Expression"
										}
									},
									"SyncToDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataTo')",
											"type": "Expression"
										}
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[spSAM_CallHistoryDetail_upsert]",
								"sqlWriterTableType": "typeSAM_CallHistoryDetail",
								"storedProcedureTableTypeParameterName": "SAM_CallHistoryDetail"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CallHistoryId",
											"type": "Int32"
										},
										"sink": {
											"name": "CallHistoryId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ScreenID",
											"type": "String"
										},
										"sink": {
											"name": "ScreenID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Function",
											"type": "String"
										},
										"sink": {
											"name": "Function",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Longitude",
											"type": "Double"
										},
										"sink": {
											"name": "Longitude",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Latitude",
											"type": "Double"
										},
										"sink": {
											"name": "Latitude",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "GPSMatch",
											"type": "Boolean"
										},
										"sink": {
											"name": "GPSMatch",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Accuracy",
											"type": "Int32"
										},
										"sink": {
											"name": "Accuracy",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DateTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "DateTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Battery",
											"type": "Double"
										},
										"sink": {
											"name": "Battery",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Signal",
											"type": "Int32"
										},
										"sink": {
											"name": "Signal",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CellularID",
											"type": "Int64"
										},
										"sink": {
											"name": "CellularID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "LocAreaCode",
											"type": "Int32"
										},
										"sink": {
											"name": "LocAreaCode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MOCNTRYCode",
											"type": "Int32"
										},
										"sink": {
											"name": "MOCNTRYCode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MOCNETCode",
											"type": "Int32"
										},
										"sink": {
											"name": "MOCNETCode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "SystemDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "SystemDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "UTCTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "UTCTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "BasisProcessingStatus",
											"type": "Int32"
										},
										"sink": {
											"name": "BasisProcessingStatus",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Message",
											"type": "String"
										},
										"sink": {
											"name": "Message",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Guid",
											"type": "Guid"
										},
										"sink": {
											"name": "Guid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "ReasonCode",
											"type": "String"
										},
										"sink": {
											"name": "ReasonCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CallHistoryGuid",
											"type": "Guid"
										},
										"sink": {
											"name": "CallHistoryGuid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Production_Sales_IaaS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Production_Report_SAM_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Success Child",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": {
										"value": "@activity('Copy from IaaS Detail').output.executionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('ChildTableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": {
										"value": "@activity('Copy from IaaS Detail').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Error Message Child",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS Detail",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@activity('Copy from IaaS Detail').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": "Error",
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('ChildTableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"SyncDataFrom": {
						"type": "string",
						"defaultValue": "-"
					},
					"SyncDataTo": {
						"type": "string",
						"defaultValue": "-"
					}
				},
				"variables": {
					"TableName": {
						"type": "String",
						"defaultValue": "SAM_CallHistory"
					},
					"SyncDataFrom": {
						"type": "String"
					},
					"SyncDataTo": {
						"type": "String"
					},
					"ChildTableName": {
						"type": "String",
						"defaultValue": "SAM_CallHistoryDetail"
					}
				},
				"folder": {
					"name": "Production/Export To Reporting/from SAM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Production_Sales_IaaS')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Users')]",
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SAM Call History Detail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from IaaS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "if to Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If from Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spExport_CallHistoryDetail]",
								"storedProcedureParameters": {
									"SyncFromDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataFrom')",
											"type": "Expression"
										}
									},
									"SyncToDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataTo')",
											"type": "Expression"
										}
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[spSAM_CallHistoryDetail_upsert]",
								"sqlWriterTableType": "typeSAM_CallHistoryDetail",
								"storedProcedureTableTypeParameterName": "SAM_CallHistoryDetail"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CallHistoryId",
											"type": "Int32"
										},
										"sink": {
											"name": "CallHistoryId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ScreenID",
											"type": "String"
										},
										"sink": {
											"name": "ScreenID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Function",
											"type": "String"
										},
										"sink": {
											"name": "Function",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Longitude",
											"type": "Double"
										},
										"sink": {
											"name": "Longitude",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Latitude",
											"type": "Double"
										},
										"sink": {
											"name": "Latitude",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "GPSMatch",
											"type": "Boolean"
										},
										"sink": {
											"name": "GPSMatch",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Accuracy",
											"type": "Int32"
										},
										"sink": {
											"name": "Accuracy",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DateTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "DateTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Battery",
											"type": "Double"
										},
										"sink": {
											"name": "Battery",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Signal",
											"type": "Int32"
										},
										"sink": {
											"name": "Signal",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CellularID",
											"type": "Int64"
										},
										"sink": {
											"name": "CellularID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "LocAreaCode",
											"type": "Int32"
										},
										"sink": {
											"name": "LocAreaCode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MOCNTRYCode",
											"type": "Int32"
										},
										"sink": {
											"name": "MOCNTRYCode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MOCNETCode",
											"type": "Int32"
										},
										"sink": {
											"name": "MOCNETCode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "SystemDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "SystemDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "UTCTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "UTCTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "BasisProcessingStatus",
											"type": "Int32"
										},
										"sink": {
											"name": "BasisProcessingStatus",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Message",
											"type": "String"
										},
										"sink": {
											"name": "Message",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Guid",
											"type": "Guid"
										},
										"sink": {
											"name": "Guid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "ReasonCode",
											"type": "String"
										},
										"sink": {
											"name": "ReasonCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CallHistoryGuid",
											"type": "Guid"
										},
										"sink": {
											"name": "CallHistoryGuid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Production_Sales_IaaS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Production_Report_SAM_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Last Sync Date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": {
										"value": "@activity('Copy from IaaS').output.executionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": {
										"value": "@activity('Copy from IaaS').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Error Message",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@activity('Copy from IaaS').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": "Error",
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup Sync Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spImportFromSAM_GetLastSyncDate]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@variables('TableName')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "Production_Report_SAM_Customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If from Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataFrom, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataFrom from parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@pipeline().parameters.SyncDataFrom",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncFromData from Table",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@activity('Lookup Sync Date').output.firstrow.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "if to Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataTo, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataTo from Parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@pipeline().parameters.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncDataTo from now function",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SyncDataFrom": {
						"type": "string",
						"defaultValue": "-"
					},
					"SyncDataTo": {
						"type": "string",
						"defaultValue": "-"
					}
				},
				"variables": {
					"TableName": {
						"type": "String",
						"defaultValue": "SAM_CallHistoryDetail"
					},
					"SyncDataFrom": {
						"type": "String",
						"defaultValue": "2019-08-11"
					},
					"SyncDataTo": {
						"type": "String",
						"defaultValue": "2019-08-12"
					}
				},
				"folder": {
					"name": "Production/Export To Reporting/from SAM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Production_Sales_IaaS')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Users')]",
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SAM Call History')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from IaaS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "if to Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If from Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spExport_CallHistory]",
								"storedProcedureParameters": {
									"SyncFromDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataFrom')",
											"type": "Expression"
										}
									},
									"SyncToDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataTo')",
											"type": "Expression"
										}
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[spSAM_CallHistory_upsert]",
								"sqlWriterTableType": "typeSAM_CallHistory",
								"storedProcedureTableTypeParameterName": "SAM_CallHistory"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CallHistoryId",
											"type": "Int32"
										},
										"sink": {
											"name": "CallHistoryId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Site",
											"type": "Int32"
										},
										"sink": {
											"name": "Site",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ScreenID",
											"type": "String"
										},
										"sink": {
											"name": "ScreenID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UserId",
											"type": "Guid"
										},
										"sink": {
											"name": "UserId",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "PinId",
											"type": "String"
										},
										"sink": {
											"name": "PinId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RouteId",
											"type": "String"
										},
										"sink": {
											"name": "RouteId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CustomerNumber",
											"type": "String"
										},
										"sink": {
											"name": "CustomerNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LocationCode",
											"type": "String"
										},
										"sink": {
											"name": "LocationCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "StartTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "StartTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "EndTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "EndTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Longitude",
											"type": "Double"
										},
										"sink": {
											"name": "Longitude",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Latitude",
											"type": "Double"
										},
										"sink": {
											"name": "Latitude",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Accuracy",
											"type": "Int32"
										},
										"sink": {
											"name": "Accuracy",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ScheduleTypeId",
											"type": "String"
										},
										"sink": {
											"name": "ScheduleTypeId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SystemStatus",
											"type": "Int32"
										},
										"sink": {
											"name": "SystemStatus",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CallStatus",
											"type": "String"
										},
										"sink": {
											"name": "CallStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CancelledReason",
											"type": "String"
										},
										"sink": {
											"name": "CancelledReason",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FollowSequence",
											"type": "Boolean"
										},
										"sink": {
											"name": "FollowSequence",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "RequestResequence",
											"type": "Boolean"
										},
										"sink": {
											"name": "RequestResequence",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "ProposeOutletBefore",
											"type": "Int32"
										},
										"sink": {
											"name": "ProposeOutletBefore",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ProposeOutletAfter",
											"type": "Int32"
										},
										"sink": {
											"name": "ProposeOutletAfter",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Remarks",
											"type": "String"
										},
										"sink": {
											"name": "Remarks",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "UploadedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "UploadedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "SystemDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "SystemDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "OffSequenceReason",
											"type": "String"
										},
										"sink": {
											"name": "OffSequenceReason",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Guid",
											"type": "Guid"
										},
										"sink": {
											"name": "Guid",
											"type": "Guid"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Production_Sales_IaaS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Production_Report_SAM_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Last Sync Date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": {
										"value": "@activity('Copy from IaaS').output.executionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": {
										"value": "@activity('Copy from IaaS').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Error Message",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@activity('Copy from IaaS').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": "Error",
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup Sync Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spImportFromSAM_GetLastSyncDate]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@variables('TableName')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "Production_Report_SAM_Customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If from Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataFrom, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataFrom from parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@pipeline().parameters.SyncDataFrom",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncFromData from Table",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@activity('Lookup Sync Date').output.firstrow.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "if to Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataTo, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataTo from Parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@pipeline().parameters.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncDataTo from now function",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SyncDataFrom": {
						"type": "string",
						"defaultValue": "-"
					},
					"SyncDataTo": {
						"type": "string",
						"defaultValue": "-"
					}
				},
				"variables": {
					"TableName": {
						"type": "String",
						"defaultValue": "SAM_CallHistory"
					},
					"SyncDataFrom": {
						"type": "String"
					},
					"SyncDataTo": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Production/Export To Reporting/from SAM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Production_Sales_IaaS')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Users')]",
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SAM Survey Transaction All')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from IaaS",
						"description": "Copy Call History",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "if to Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If from Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spExport_SurveyTransaction]",
								"storedProcedureParameters": {
									"SyncFromDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataFrom')",
											"type": "Expression"
										}
									},
									"SyncToDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataTo')",
											"type": "Expression"
										}
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[spSAM_SurveyTransaction_upsert]",
								"sqlWriterTableType": "typeSAM_SurveyTransaction",
								"storedProcedureTableTypeParameterName": "SAM_SurveyTransaction"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Site",
											"type": "Int32"
										},
										"sink": {
											"name": "Site",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Guid",
											"type": "Guid"
										},
										"sink": {
											"name": "Guid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "Route",
											"type": "String"
										},
										"sink": {
											"name": "Route",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OutletNumber",
											"type": "String"
										},
										"sink": {
											"name": "OutletNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "WindowsId",
											"type": "String"
										},
										"sink": {
											"name": "WindowsId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SurveyId",
											"type": "Int32"
										},
										"sink": {
											"name": "SurveyId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "SurveyDescription",
											"type": "String"
										},
										"sink": {
											"name": "SurveyDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "StartSurveyDateTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "StartSurveyDateTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "EndSurveyDateTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "EndSurveyDateTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Comment",
											"type": "String"
										},
										"sink": {
											"name": "Comment",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "SurveyType",
											"type": "String"
										},
										"sink": {
											"name": "SurveyType",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FlagTransaction",
											"type": "String"
										},
										"sink": {
											"name": "FlagTransaction",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TotalScore",
											"type": "Double"
										},
										"sink": {
											"name": "TotalScore",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "CallHistoryGuid",
											"type": "Guid"
										},
										"sink": {
											"name": "CallHistoryGuid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "ReasonCode",
											"type": "String"
										},
										"sink": {
											"name": "ReasonCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ReasonDescription",
											"type": "String"
										},
										"sink": {
											"name": "ReasonDescription",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Production_Sales_IaaS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Production_Report_SAM_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Last Sync Date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": {
										"value": "@activity('Copy from IaaS').output.executionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": {
										"value": "@activity('Copy from IaaS').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Error Message",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@activity('Copy from IaaS').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": "Error",
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup Sync Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spImportFromSAM_GetLastSyncDate]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@variables('TableName')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "Production_Report_SAM_Customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If from Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataFrom, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataFrom from parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@pipeline().parameters.SyncDataFrom",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncDataFrom from Table",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@activity('Lookup Sync Date').output.firstrow.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "if to Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataTo, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataTo from Parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@pipeline().parameters.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncDataTo from Table",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@activity('Lookup Sync Date').output.firstrow.NowTime",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy from IaaS Detail",
						"description": "Copy Call History Detail",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Last Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spExport_SurveyTransactionAnswer]",
								"storedProcedureParameters": {
									"SyncFromDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataFrom')",
											"type": "Expression"
										}
									},
									"SyncToDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataTo')",
											"type": "Expression"
										}
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[spSAM_SurveyTransactionAnswer_upsert]",
								"sqlWriterTableType": "typeSAM_SurveyTransactionAnswer",
								"storedProcedureTableTypeParameterName": "SAM_SurveyTransactionAnswer"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Site",
											"type": "Int32"
										},
										"sink": {
											"name": "Site",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Id",
											"type": "Int32"
										},
										"sink": {
											"name": "Id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Guid",
											"type": "Guid"
										},
										"sink": {
											"name": "Guid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "SectionName",
											"type": "String"
										},
										"sink": {
											"name": "SectionName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QuestionSequence",
											"type": "Int32"
										},
										"sink": {
											"name": "QuestionSequence",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QuestionId",
											"type": "Int32"
										},
										"sink": {
											"name": "QuestionId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QuestionDescription",
											"type": "String"
										},
										"sink": {
											"name": "QuestionDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QuestionType",
											"type": "String"
										},
										"sink": {
											"name": "QuestionType",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AnswerCode",
											"type": "String"
										},
										"sink": {
											"name": "AnswerCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AnswerText",
											"type": "String"
										},
										"sink": {
											"name": "AnswerText",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Notes",
											"type": "String"
										},
										"sink": {
											"name": "Notes",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Production_Sales_IaaS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Production_Report_SAM_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Success Child",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": {
										"value": "@activity('Copy from IaaS Detail').output.executionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('ChildTableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": {
										"value": "@activity('Copy from IaaS Detail').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Error Message Child",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS Detail",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@activity('Copy from IaaS Detail').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": "Error",
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('ChildTableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"SyncDataFrom": {
						"type": "string",
						"defaultValue": "-"
					},
					"SyncDataTo": {
						"type": "string",
						"defaultValue": "-"
					}
				},
				"variables": {
					"TableName": {
						"type": "String",
						"defaultValue": "SAM_SurveyTransaction"
					},
					"SyncDataFrom": {
						"type": "String"
					},
					"SyncDataTo": {
						"type": "String"
					},
					"ChildTableName": {
						"type": "String",
						"defaultValue": "SAM_SurveyTransactionAnswer"
					}
				},
				"folder": {
					"name": "Production/Export To Reporting/from SAM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Production_Sales_IaaS')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Users')]",
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SAM Survey Transaction Answer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from IaaS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "if to Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If from Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spExport_SurveyTransactionAnswer]",
								"storedProcedureParameters": {
									"SyncFromDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataFrom')",
											"type": "Expression"
										}
									},
									"SyncToDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataTo')",
											"type": "Expression"
										}
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[spSAM_SurveyTransactionAnswer_upsert]",
								"sqlWriterTableType": "typeSAM_SurveyTransactionAnswer",
								"storedProcedureTableTypeParameterName": "SAM_SurveyTransactionAnswer"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Site",
											"type": "Int32"
										},
										"sink": {
											"name": "Site",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Id",
											"type": "Int32"
										},
										"sink": {
											"name": "Id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Guid",
											"type": "Guid"
										},
										"sink": {
											"name": "Guid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "SectionName",
											"type": "String"
										},
										"sink": {
											"name": "SectionName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QuestionSequence",
											"type": "Int32"
										},
										"sink": {
											"name": "QuestionSequence",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QuestionId",
											"type": "Int32"
										},
										"sink": {
											"name": "QuestionId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QuestionDescription",
											"type": "String"
										},
										"sink": {
											"name": "QuestionDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QuestionType",
											"type": "String"
										},
										"sink": {
											"name": "QuestionType",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AnswerCode",
											"type": "String"
										},
										"sink": {
											"name": "AnswerCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AnswerText",
											"type": "String"
										},
										"sink": {
											"name": "AnswerText",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Notes",
											"type": "String"
										},
										"sink": {
											"name": "Notes",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Production_Sales_IaaS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Production_Report_SAM_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Last Sync Date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": {
										"value": "@activity('Copy from IaaS').output.executionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": {
										"value": "@activity('Copy from IaaS').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Error Message",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@activity('Copy from IaaS').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": "Error",
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup Sync Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spImportFromSAM_GetLastSyncDate]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@variables('TableName')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "Production_Report_SAM_Customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If from Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataFrom, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataFrom from parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@pipeline().parameters.SyncDataFrom",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncFromData from Table",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@activity('Lookup Sync Date').output.firstrow.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "if to Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataTo, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataTo from Parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@pipeline().parameters.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncDataTo from now function",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SyncDataFrom": {
						"type": "string",
						"defaultValue": "-"
					},
					"SyncDataTo": {
						"type": "string",
						"defaultValue": "-"
					}
				},
				"variables": {
					"TableName": {
						"type": "String",
						"defaultValue": "SAM_SurveyTransactionAnswer"
					},
					"SyncDataFrom": {
						"type": "String"
					},
					"SyncDataTo": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Production/Export To Reporting/from SAM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Production_Sales_IaaS')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Users')]",
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SAM Survey Transaction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from IaaS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "if to Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If from Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spExport_SurveyTransaction]",
								"storedProcedureParameters": {
									"SyncFromDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataFrom')",
											"type": "Expression"
										}
									},
									"SyncToDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataTo')",
											"type": "Expression"
										}
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[spSAM_SurveyTransaction_upsert]",
								"sqlWriterTableType": "typeSAM_SurveyTransaction",
								"storedProcedureTableTypeParameterName": "SAM_SurveyTransaction"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Site",
											"type": "Int32"
										},
										"sink": {
											"name": "Site",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Guid",
											"type": "Guid"
										},
										"sink": {
											"name": "Guid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "Route",
											"type": "String"
										},
										"sink": {
											"name": "Route",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OutletNumber",
											"type": "String"
										},
										"sink": {
											"name": "OutletNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "WindowsId",
											"type": "String"
										},
										"sink": {
											"name": "WindowsId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SurveyId",
											"type": "Int32"
										},
										"sink": {
											"name": "SurveyId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "SurveyDescription",
											"type": "String"
										},
										"sink": {
											"name": "SurveyDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "StartSurveyDateTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "StartSurveyDateTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "EndSurveyDateTime",
											"type": "DateTime"
										},
										"sink": {
											"name": "EndSurveyDateTime",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Comment",
											"type": "String"
										},
										"sink": {
											"name": "Comment",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "SurveyType",
											"type": "String"
										},
										"sink": {
											"name": "SurveyType",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FlagTransaction",
											"type": "String"
										},
										"sink": {
											"name": "FlagTransaction",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TotalScore",
											"type": "Double"
										},
										"sink": {
											"name": "TotalScore",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "CallHistoryGuid",
											"type": "Guid"
										},
										"sink": {
											"name": "CallHistoryGuid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "ReasonCode",
											"type": "String"
										},
										"sink": {
											"name": "ReasonCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ReasonDescription",
											"type": "String"
										},
										"sink": {
											"name": "ReasonDescription",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Production_Sales_IaaS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Production_Report_SAM_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Last Sync Date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": {
										"value": "@activity('Copy from IaaS').output.executionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": {
										"value": "@activity('Copy from IaaS').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Error Message",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@activity('Copy from IaaS').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": "Error",
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup Sync Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spImportFromSAM_GetLastSyncDate]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@variables('TableName')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "Production_Report_SAM_Customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If from Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataFrom, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataFrom from parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@pipeline().parameters.SyncDataFrom",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncFromData from Table",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@activity('Lookup Sync Date').output.firstrow.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "if to Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataTo, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataTo from Parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@pipeline().parameters.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncDataTo from now function",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SyncDataFrom": {
						"type": "string",
						"defaultValue": "-"
					},
					"SyncDataTo": {
						"type": "string",
						"defaultValue": "-"
					}
				},
				"variables": {
					"TableName": {
						"type": "String",
						"defaultValue": "SAM_SurveyTransaction"
					},
					"SyncDataFrom": {
						"type": "String"
					},
					"SyncDataTo": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Production/Export To Reporting/from SAM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Production_Sales_IaaS')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Users')]",
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SAM Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from IaaS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "if to Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If from Date blank",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spExport_Users]",
								"storedProcedureParameters": {
									"SyncFromDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataFrom')",
											"type": "Expression"
										}
									},
									"SyncToDate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SyncDataTo')",
											"type": "Expression"
										}
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[spSAM_Users_upsert]",
								"sqlWriterTableType": "typeSAM_Users",
								"storedProcedureTableTypeParameterName": "SAM_Users"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "UserId",
											"type": "Guid"
										},
										"sink": {
											"name": "UserId",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "UserName",
											"type": "String"
										},
										"sink": {
											"name": "UserName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PrimaryPhoneNumber",
											"type": "String"
										},
										"sink": {
											"name": "PrimaryPhoneNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SecondaryPhoneNumber",
											"type": "String"
										},
										"sink": {
											"name": "SecondaryPhoneNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PaymentAccess",
											"type": "Boolean"
										},
										"sink": {
											"name": "PaymentAccess",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "EmailOptIn",
											"type": "Boolean"
										},
										"sink": {
											"name": "EmailOptIn",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "CurrentCustomerSite",
											"type": "Int32"
										},
										"sink": {
											"name": "CurrentCustomerSite",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CurrentCustomerNumber",
											"type": "String"
										},
										"sink": {
											"name": "CurrentCustomerNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BDECustomerSite",
											"type": "Int32"
										},
										"sink": {
											"name": "BDECustomerSite",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "BDECustomerNumber",
											"type": "String"
										},
										"sink": {
											"name": "BDECustomerNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RouteSite",
											"type": "Int32"
										},
										"sink": {
											"name": "RouteSite",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "SapUserName",
											"type": "String"
										},
										"sink": {
											"name": "SapUserName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ExternalUserId",
											"type": "String"
										},
										"sink": {
											"name": "ExternalUserId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PinID",
											"type": "String"
										},
										"sink": {
											"name": "PinID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RoleId",
											"type": "Int32"
										},
										"sink": {
											"name": "RoleId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Application",
											"type": "String"
										},
										"sink": {
											"name": "Application",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "Boolean"
										},
										"sink": {
											"name": "Status",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "LocationCode",
											"type": "String"
										},
										"sink": {
											"name": "LocationCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PersonnelNumber",
											"type": "String"
										},
										"sink": {
											"name": "PersonnelNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SubLoc",
											"type": "String"
										},
										"sink": {
											"name": "SubLoc",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PositionCode",
											"type": "Int32"
										},
										"sink": {
											"name": "PositionCode",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IsDelete",
											"type": "Boolean"
										},
										"sink": {
											"name": "IsDelete",
											"type": "Boolean"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Production_Sales_IaaS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Production_Report_SAM_Users",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Last Sync Date",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": {
										"value": "@activity('Copy from IaaS').output.executionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": {
										"value": "@activity('Copy from IaaS').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update Error Message",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from IaaS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spImportFromSAM_UpsertLastSyncDate]",
							"storedProcedureParameters": {
								"ErrorMessage": {
									"value": {
										"value": "@activity('Copy from IaaS').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"LastSyncDate": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"Status": {
									"value": "Error",
									"type": "String"
								},
								"SyncDataFrom": {
									"value": {
										"value": "@variables('SyncDataFrom')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"SyncDataTo": {
									"value": {
										"value": "@variables('SyncDataTo')",
										"type": "Expression"
									},
									"type": "DateTimeOffset"
								},
								"TableName": {
									"value": {
										"value": "@variables('TableName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"TotalRecords": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "IR2_REPORT_PRODUCTION",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup Sync Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spImportFromSAM_GetLastSyncDate]",
								"storedProcedureParameters": {
									"TableName": {
										"type": "String",
										"value": {
											"value": "@variables('TableName')",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "Production_Report_SAM_Customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If from Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataFrom, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataFrom from parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@pipeline().parameters.SyncDataFrom",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncFromData from Table",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataFrom",
										"value": {
											"value": "@activity('Lookup Sync Date').output.firstrow.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "if to Date blank",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Sync Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.SyncDataTo, '-')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SyncDataTo from Parameter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@pipeline().parameters.SyncDataTo",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SyncDataTo from now function",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SyncDataTo",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"SyncDataFrom": {
						"type": "string",
						"defaultValue": "-"
					},
					"SyncDataTo": {
						"type": "string",
						"defaultValue": "-"
					}
				},
				"variables": {
					"TableName": {
						"type": "String",
						"defaultValue": "SAM_Users"
					},
					"SyncDataFrom": {
						"type": "String"
					},
					"SyncDataTo": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Production/Export To Reporting/from SAM"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Production_Sales_IaaS')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Users')]",
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/Production_Report_SAM_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sending Email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send Email",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Set json Message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "PostMessage",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(variables('jsonBody'))",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "CoreFunction",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set json Message",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "jsonBody",
							"value": {
								"value": "@replace(replace(replace(replace(replace(replace(replace(replace(replace(variables('templateBody'),'~from~',pipeline().parameters.from),'~to~',pipeline().parameters.to),'~SUBJECT~',pipeline().parameters.subject),'~CONTENT~',pipeline().parameters.content),'~MESSAGEGUID~',pipeline().parameters.message_id),'~QUEUEGUID~',pipeline().parameters.Queue_id),'~cc~', pipeline().parameters.cc), '~bcc~', pipeline().parameters.bcc), '~ATTACHMENTS~', pipeline().parameters.attachments)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"from": {
						"type": "string"
					},
					"to": {
						"type": "string"
					},
					"message_id": {
						"type": "string"
					},
					"subject": {
						"type": "string"
					},
					"content": {
						"type": "string"
					},
					"Queue_id": {
						"type": "string"
					},
					"cc": {
						"type": "string"
					},
					"bcc": {
						"type": "string"
					},
					"attachments": {
						"type": "string",
						"defaultValue": " "
					}
				},
				"variables": {
					"jsonBody": {
						"type": "String"
					},
					"templateBody": {
						"type": "String",
						"defaultValue": "'{   \"queue_id\": \"~QUEUEGUID~\",   \"message\": {     \"type\": \"email\",     \"message_id\": \"~MESSAGEGUID~\",     \"from\": \"~from~\",     \"to\": \"~to~\",     \"cc\": \"~cc~\",     \"bcc\": \"~bcc~\",     \"subject\": \"~SUBJECT~\",     \"content\": \"~CONTENT~\",     \"attachment\": [~ATTACHMENTS~]   } }'"
					}
				},
				"folder": {
					"name": "Master Template"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CoreFunction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UpdateInvalidStatus_DataSubmitStaging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UpdateInvalidStatus_DataSubmitStaging",
						"description": "Update Invalid Status for Data Submit Staging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_DataSubmitStaging_IsSynchronizedtoZero]"
						},
						"linkedServiceName": {
							"referenceName": "PaaS_REDCoaching_Production",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PaaS_REDCoaching_Production')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax 1 File Management')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of File",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.directory",
										"type": "Expression"
									},
									"filename": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "ForEach File PDF",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "File PDF only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('File PDF only').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute File to lookup",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Create Log in SQL - PDF",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "eTax 2 Proses 1 file",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.directory",
												"type": "Expression"
											},
											"sourceFile": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Create Log in SQL - PDF",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Insert",
										"storedProcedureParameters": {
											"CreatedBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@variables('secretCore')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter File only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get List of File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of File').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File PDF only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Filter File only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File only').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(split(item().name,'.')[1],'pdf')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "File not PDF",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Filter File only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File only').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(equals(split(item().name,'.')[1],'pdf'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach File not PDF",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "File not PDF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('File not PDF').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Update if invoice info is not found",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Create Log in SQL - not PDF",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Error",
										"storedProcedureParameters": {
											"Error": {
												"value": {
													"value": "File is not PDF",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											},
											"Folder": {
												"value": {
													"value": "Not PDF File",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "I",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@variables('secretCore')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Exe Pipeline - Move to not PDF file folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Update if invoice info is not found",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.directory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.directory,'/Not PDF File')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@item().name",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								},
								{
									"name": "Create Log in SQL - not PDF",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Insert",
										"storedProcedureParameters": {
											"CreatedBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@variables('secretCore')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"directory": {
						"type": "string",
						"defaultValue": "VAT Output 2\\VAT Output 3"
					}
				},
				"variables": {
					"newFilename": {
						"type": "Array"
					},
					"fileTarget": {
						"type": "String"
					},
					"isFile": {
						"type": "Boolean"
					},
					"secretCore": {
						"type": "String",
						"defaultValue": "azure-sql-prd-core"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/File_in_idcbtap22')]",
				"[concat(variables('factoryId'), '/pipelines/eTax 2 Proses 1 file')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax 2 Proses 1 file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup CCAI NPWP",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "spCcaiNpwp_GetEntity",
								"storedProcedureParameters": {
									"TaxNumber": {
										"value": {
											"value": "@split(pipeline().parameters.sourceFile,'-')[0]",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "Configuration",
									"secret": {
										"value": "@variables('secretCore')",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Lookup Invoice Info",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "spETax_GetInvoiceInfo",
								"storedProcedureParameters": {
									"TaxInvoice": {
										"value": {
											"value": "@split(pipeline().parameters.sourceFile,'-')[1]",
											"type": "Expression"
										}
									}
								}
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "Orders",
									"secret": {
										"value": "@variables('secretSales')",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "If Invoice Info is found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup Invoice Info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Lookup Invoice Info').output,'firstrow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Exe Pipeline - Move to inappropriate file_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								},
								{
									"name": "Update if invoice info not found",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to inappropriate file_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Error",
										"storedProcedureParameters": {
											"Error": {
												"value": {
													"value": "Invoice is not found",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"Folder": {
												"value": {
													"value": "Inappropriate File",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "I",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@variables('secretCore')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set Customer Number",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CustomerNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.CustomerNumber",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Invoice Date",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Customer Number",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "InvoiceDate",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.BillingDate",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Invoice Number",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Invoice Date",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "InvoiceNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.CommercialInvoice",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Tax Number",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set Invoice Number",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TaxNumber",
										"value": {
											"value": "@activity('Lookup Invoice Info').output.firstrow.TaxInvoice",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If entity found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup CCAI NPWP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('Lookup CCAI NPWP').output,'firstrow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update if entity not found",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to inappropriate file_copy2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_Error",
										"storedProcedureParameters": {
											"Error": {
												"value": {
													"value": "Entity is not found",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"Folder": {
												"value": {
													"value": "Inappropriate File",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": null,
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "I",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@variables('secretCore')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Exe Pipeline - Move to inappropriate file_copy2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set entity",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Entity",
										"value": {
											"value": "@activity('Lookup CCAI NPWP').output.firstrow.Entity",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If entity and invoice is found",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If entity found",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "If Invoice Info is found",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(not(equals(variables('Entity'),'')),not(equals(variables('InvoiceNumber'),'')))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Set filename",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "newFilename",
										"value": {
											"value": "@concat(variables('Entity'),'-',\nvariables('InvoiceDate'),'-',\nvariables('InvoiceNumber'),'-',\nvariables('CustomerNumber'),'-',\nvariables('TaxNumber'),'.pdf')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Update Log - To Be Sent",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Exe Pipeline - Move to To Be Sent",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "spETaxFileLog_ToBeSent",
										"storedProcedureParameters": {
											"CustomerNumber": {
												"value": {
													"value": "@variables('CustomerNumber')",
													"type": "Expression"
												},
												"type": "String"
											},
											"Filename": {
												"value": {
													"value": "@pipeline().parameters.sourceFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"LastUpdateBy": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NewFilename": {
												"value": {
													"value": "@variables('newFilename')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "GenericAzureSqlDatabase",
										"type": "LinkedServiceReference",
										"parameters": {
											"Secret": {
												"value": "@variables('secretCore')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Exe Pipeline - Move to To Be Sent",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Copy or Move File idcbtap22",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"sourceDirectory": {
												"value": "@pipeline().parameters.sourceDirectory",
												"type": "Expression"
											},
											"sourceFilename": {
												"value": "@pipeline().parameters.sourceFile",
												"type": "Expression"
											},
											"targetDirectory": {
												"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
												"type": "Expression"
											},
											"targetFilename": {
												"value": "@variables('newFilename')",
												"type": "Expression"
											},
											"isMove": "true"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "/dev/Pdf"
					},
					"sourceFile": {
						"type": "string",
						"defaultValue": "010706570201001-0100021927344922-031207392211000-20190731112502.pdf"
					}
				},
				"variables": {
					"TaxNumber": {
						"type": "String"
					},
					"Entity": {
						"type": "String"
					},
					"CustomerNumber": {
						"type": "String"
					},
					"newFilename": {
						"type": "String"
					},
					"emailMessage": {
						"type": "String"
					},
					"InvoiceDate": {
						"type": "String"
					},
					"InvoiceNumber": {
						"type": "String"
					},
					"secretCore": {
						"type": "String",
						"defaultValue": "azure-sql-prd-core"
					},
					"secretSales": {
						"type": "String",
						"defaultValue": "azure-sql-prd-sales"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax 3 Send Email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pdfs in To Be Sent",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "File_in_idcbtap22",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
										"type": "Expression"
									},
									"filename": "*.pdf"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "Generate Message ID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter File only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter File only').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Lookup Customer Info",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "spCustomer_GetEmailAndOperation",
											"storedProcedureParameters": {
												"CustomerNumber": {
													"value": {
														"value": "@split(item().name,'-')[3]",
														"type": "Expression"
													}
												}
											}
										},
										"dataset": {
											"referenceName": "GenericAzureSQLDatabase",
											"type": "DatasetReference",
											"parameters": {
												"table": "Customers",
												"secret": {
													"value": "@variables('KeyVaultMasterData')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "If Customer Info is found",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup Customer Info",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(activity('Lookup Customer Info').output,'firstrow')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Update if customer info is not found",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to inappropriate file_copy1_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_Error",
													"storedProcedureParameters": {
														"Error": {
															"value": {
																"value": "Customer Master is not found",
																"type": "Expression"
															},
															"type": "String"
														},
														"Filename": {
															"value": null,
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "Inappropriate File",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"NewFilename": {
															"value": {
																"value": "@item().name",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "I",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": {
															"value": "@variables('KeyVaultCore')",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Exe Pipeline - Move to inappropriate file_copy1_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Inappropriate File')",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"isMove": "true"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Exe Pipeline - Move to Processing",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Copy Blob attachment",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sending')",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().name",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Get Message ID",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderStoredProcedureName": "[[dbo].[spETaxFileLog_GenerateMessageId]",
														"storedProcedureParameters": {
															"CustomerNumber": {
																"type": "String",
																"value": {
																	"value": "@activity('Lookup Customer Info').output.firstrow.CustomerNumber",
																	"type": "Expression"
																}
															},
															"Email": {
																"type": "String",
																"value": {
																	"value": "@activity('Lookup Customer Info').output.firstrow.Email",
																	"type": "Expression"
																}
															},
															"NewFilename": {
																"type": "String",
																"value": {
																	"value": "@item().name",
																	"type": "Expression"
																}
															},
															"Operation": {
																"type": "String",
																"value": {
																	"value": "@activity('Lookup Customer Info').output.firstrow.Operation",
																	"type": "Expression"
																}
															}
														},
														"queryTimeout": "02:00:00"
													},
													"dataset": {
														"referenceName": "GenericAzureSQLDatabase",
														"type": "DatasetReference",
														"parameters": {
															"table": "eTaxFileLog",
															"secret": {
																"value": "@variables('KeyVaultCore')",
																"type": "Expression"
															}
														}
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Copy Blob attachment",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Get Message ID",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": true
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "File_in_idcbtap22",
														"type": "DatasetReference",
														"parameters": {
															"directory": {
																"value": "@concat(pipeline().parameters.sourceDirectory,'/To Be Sent')",
																"type": "Expression"
															},
															"filename": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "FileInBlob",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@variables('BlobContainer')",
																"type": "Expression"
															},
															"directory": {
																"value": "@concat(variables('BlobFolderAttachment'),activity('Get Message ID').output.firstrow.MessageID)",
																"type": "Expression"
															},
															"file": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter File only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Pdfs in To Be Sent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Pdfs in To Be Sent').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get JSON Message",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Generate Message ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[spETaxFileLog_PostMessage]",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "eTaxFileLog",
									"secret": {
										"value": "@variables('KeyVaultCore')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Message id",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get JSON Message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get JSON Message').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If email valid",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@item().isEmailValid",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Sending Email",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Sending Email",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"from": {
															"value": "@variables('From')",
															"type": "Expression"
														},
														"to": {
															"value": "@item().Email",
															"type": "Expression"
														},
														"message_id": {
															"value": "@item().Messageid",
															"type": "Expression"
														},
														"subject": {
															"value": "@concat(variables('Subject'),' ',formatDateTime(item().SentDate,'MMM yyyy'), ' ', item().Messageid)",
															"type": "Expression"
														},
														"content": {
															"value": "@variables('Content')",
															"type": "Expression"
														},
														"Queue_id": {
															"value": "@variables('queue')",
															"type": "Expression"
														},
														"cc": {
															"value": "@variables('cc')",
															"type": "Expression"
														},
														"bcc": {
															"value": "@variables('bcc')",
															"type": "Expression"
														},
														"attachments": {
															"value": "@item().Attachment",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "VAT Output 2\\VAT Output 3"
					}
				},
				"variables": {
					"JSONMessage": {
						"type": "String"
					},
					"CustomerNumber": {
						"type": "String"
					},
					"BlobFolderAttachment": {
						"type": "String",
						"defaultValue": "attachment/"
					},
					"BlobContainer": {
						"type": "String",
						"defaultValue": "messaging"
					},
					"KeyVaultMasterData": {
						"type": "String",
						"defaultValue": "azure-sql-prd-masterdata"
					},
					"KeyVaultCore": {
						"type": "String",
						"defaultValue": "azure-sql-prd-core"
					},
					"isEmailValid": {
						"type": "String"
					},
					"isFoundRecord": {
						"type": "String"
					},
					"Content": {
						"type": "String",
						"defaultValue": "Yth. Pelanggan PT Coca-Cola Distribution Indonesia, <br /><br /> Terlampir adalah dokumen E-Faktur Pajak anda. <br /><br /> Terima kasih. "
					},
					"Subject": {
						"type": "String",
						"defaultValue": "E-Faktur Pajak PT Coca-Cola Distribution Indonesia Periode "
					},
					"From": {
						"type": "String",
						"defaultValue": "idn.vatoutput@ccamatil.com"
					},
					"cc": {
						"type": "String",
						"defaultValue": "wisnu.andhika@ccamatil.com"
					},
					"bcc": {
						"type": "String",
						"defaultValue": "andreas.herrinto@ccamatil.com"
					},
					"queue": {
						"type": "String",
						"defaultValue": "A140452BD16743979AC6058E79BC85A3"
					},
					"Test": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/File_in_idcbtap22')]",
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]",
				"[concat(variables('factoryId'), '/datasets/FileInBlob')]",
				"[concat(variables('factoryId'), '/pipelines/Sending Email')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax 4 Read Status')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Status Sending",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": "VW_eTaxFileLogWaitingResponse",
									"secret": {
										"value": "@variables('KeyVaultCore')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach waiting status",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Status Sending",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Status Sending').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Success in Blob",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileInBlob",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@variables('BlobContainer')",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(variables('BlobSuccessFolder'),formatDateTime(item().SentDate,'yyyyMMdd'),'/')",
													"type": "Expression"
												},
												"file": {
													"value": "@concat(item().Messageid,'.json')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										}
									}
								},
								{
									"name": "If found in Success",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set if success",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set is email sent",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(not(variables('isEmailSent')),variables('isFound'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Get failed",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "FileInBlob",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@variables('BlobContainer')",
																"type": "Expression"
															},
															"directory": {
																"value": "@concat(variables('BlobFailFolder'),formatDateTime(item().SentDate,'yyyyMMdd'),'/')",
																"type": "Expression"
															},
															"file": {
																"value": "@concat(item().Messageid,'.json')",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"exists"
													],
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Set if fail",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get failed",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isFound",
													"value": {
														"value": "@activity('Get failed').output.exists",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Exe Pipeline - Move to Sent",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sending')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sent/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Update Log - Sent",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to Sent",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_UpdateResponse",
													"storedProcedureParameters": {
														"Error": {
															"value": null,
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "@concat(pipeline().parameters.sourceDirectory,'/Sent/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"message_id": {
															"value": {
																"value": "@item().Messageid",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "@if(variables('isEmailSent'),'S','U')",
																"type": "Expression"
															},
															"type": "String"
														},
														"Filename": {
															"value": {
																"value": "@item().Filename",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": {
															"value": "@variables('KeyVaultCore')",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Reset if found variable",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Update Log - Sent",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isFound",
													"value": {
														"value": "@bool(0)",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "If found in fail",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If found in Success",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('isFound')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Exe Pipeline - Move to Fail",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Copy or Move File idcbtap22",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"sourceDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/Sending')",
															"type": "Expression"
														},
														"sourceFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"targetDirectory": {
															"value": "@concat(pipeline().parameters.sourceDirectory,'/failed/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
															"type": "Expression"
														},
														"targetFilename": {
															"value": "@item().NewFilename",
															"type": "Expression"
														},
														"isMove": {
															"value": "true",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Update Log - Fail",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Exe Pipeline - Move to Fail",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "spETaxFileLog_UpdateResponse",
													"storedProcedureParameters": {
														"Error": {
															"value": {
																"value": "Email is failed to sent",
																"type": "Expression"
															},
															"type": "String"
														},
														"Folder": {
															"value": {
																"value": "@concat(pipeline().parameters.sourceDirectory,'/Fail/',item().Operation,formatDateTime(item().SentDate,'/yyyy/MM - MMMM/dd'))",
																"type": "Expression"
															},
															"type": "String"
														},
														"LastUpdateBy": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"message_id": {
															"value": {
																"value": "@item().Messageid",
																"type": "Expression"
															},
															"type": "String"
														},
														"Status": {
															"value": {
																"value": "F",
																"type": "Expression"
															},
															"type": "String"
														},
														"Filename": {
															"value": {
																"value": "@item().Filename",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "GenericAzureSqlDatabase",
													"type": "LinkedServiceReference",
													"parameters": {
														"Secret": {
															"value": "@variables('KeyVaultCore')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Set if success",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Success in Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "isFound",
										"value": {
											"value": "@activity('Get Success in Blob').output.exists",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set is email sent",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "isEmailSent",
										"value": {
											"value": "@equals(item().Status, 'W')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"sourceDirectory": {
						"type": "string",
						"defaultValue": "VAT Output 2\\VAT Output 3"
					}
				},
				"variables": {
					"KeyVaultCore": {
						"type": "String",
						"defaultValue": "azure-sql-prd-core"
					},
					"BlobContainer": {
						"type": "String",
						"defaultValue": "messaging"
					},
					"BlobSuccessFolder": {
						"type": "String",
						"defaultValue": "Success/etax/"
					},
					"BlobFailFolder": {
						"type": "String",
						"defaultValue": "Failed/etax/"
					},
					"isFound": {
						"type": "Boolean"
					},
					"isEmailSent": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "eTAX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/FileInBlob')]",
				"[concat(variables('factoryId'), '/pipelines/Copy or Move File idcbtap22')]",
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CsvFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().deliminator",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_CDE_QAQuestion')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_CDE_DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Development"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Site",
						"type": "nvarchar"
					},
					{
						"name": "EquipmentNumber",
						"type": "nvarchar"
					},
					{
						"name": "SectionID",
						"type": "nvarchar"
					},
					{
						"name": "MeasuringPoint",
						"type": "nvarchar"
					},
					{
						"name": "QuestionText",
						"type": "nvarchar"
					},
					{
						"name": "ProductID",
						"type": "nvarchar"
					},
					{
						"name": "Sequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AnswerGroup",
						"type": "nvarchar"
					},
					{
						"name": "UnitOfMeasure",
						"type": "nvarchar"
					},
					{
						"name": "MaxValue",
						"type": "nvarchar"
					},
					{
						"name": "MinValue",
						"type": "nvarchar"
					},
					{
						"name": "DataType",
						"type": "varchar"
					},
					{
						"name": "QuestCode",
						"type": "varchar"
					},
					{
						"name": "IsActive",
						"type": "bit"
					},
					{
						"name": "CreatedBy",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "ModifiedBy",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[QAQuestions]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_CDE_DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_CORE_Configuration')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_CORE_DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Development"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Category",
						"type": "varchar"
					},
					{
						"name": "Mainkey",
						"type": "varchar"
					},
					{
						"name": "Subkey",
						"type": "varchar"
					},
					{
						"name": "Data",
						"type": "varchar"
					},
					{
						"name": "Data_Desc",
						"type": "varchar"
					},
					{
						"name": "Param",
						"type": "varchar"
					},
					{
						"name": "Param_Desc",
						"type": "varchar"
					},
					{
						"name": "Type",
						"type": "varchar"
					},
					{
						"name": "Reference",
						"type": "varchar"
					},
					{
						"name": "Application",
						"type": "varchar"
					},
					{
						"name": "UpdateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Configuration]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_CORE_DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_CORE_CoreConfigurationToBI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_CORE_DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Development"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "UPDATE_STATUS",
						"type": "varchar"
					},
					{
						"name": "MAINKEY",
						"type": "varchar"
					},
					{
						"name": "SUBKEY",
						"type": "varchar"
					},
					{
						"name": "DATAFIELD",
						"type": "varchar"
					},
					{
						"name": "CreateDate",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "ModifiedDate",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[CoreConfigurationToBI]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_CORE_DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_CORE_Role')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_CORE_DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Development"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PK_MGroupMenu_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GroupMenuName",
						"type": "varchar"
					},
					{
						"name": "GroupMenuDesciption",
						"type": "varchar"
					},
					{
						"name": "Active",
						"type": "bit"
					},
					{
						"name": "type",
						"type": "varchar"
					},
					{
						"name": "Application",
						"type": "varchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "LastUpdateBy",
						"type": "varchar"
					},
					{
						"name": "ApprovedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ApprovedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[MGroupMenu]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_CORE_DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_IaaS_ATB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IaaS_SALES",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Development"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Site",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Period",
						"type": "nvarchar"
					},
					{
						"name": "CustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "CreditLimit",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "OpeningBalance",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "TotalOverdueAmount",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "OverdueAmount1to30Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "OverdueAmount31to60Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "OverdueAmountOver60Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "ARCreditOutstanding",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "ARTemporaryCreditOutstanding",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "ARCashOutstanding",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "ARInvoiceCreditDay",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipToNumber",
						"type": "nvarchar"
					},
					{
						"name": "CreditSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreditType",
						"type": "nvarchar"
					},
					{
						"name": "InvoiceNumber",
						"type": "nvarchar"
					},
					{
						"name": "InvoiceStatus",
						"type": "nvarchar"
					},
					{
						"name": "InvoiceAmount",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "LPCAmount",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "SettlementLocation",
						"type": "nvarchar"
					},
					{
						"name": "ARLocation",
						"type": "nvarchar"
					},
					{
						"name": "ARCollectorRoute",
						"type": "nvarchar"
					},
					{
						"name": "InvoiceDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ReceiptDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SubmissionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CalculatedDueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LastPaymentDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ReferenceNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PastDueFlag",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AgeDelivery",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AgeSubmission",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DaysToReceive",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DaysToSubmit",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DaysInAR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Current",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue1to7Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue8to14Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue15to21Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue22to30Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue31to60Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue61to90Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue91to120Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "OverdueOver120Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Unapplied",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overpayment",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "ProprietaryBadDebt",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "DCM",
						"type": "nvarchar"
					},
					{
						"name": "GM",
						"type": "nvarchar"
					},
					{
						"name": "SM",
						"type": "nvarchar"
					},
					{
						"name": "MarketingLocation",
						"type": "nvarchar"
					},
					{
						"name": "ARResponsibilityCode",
						"type": "nvarchar"
					},
					{
						"name": "PKPFlag",
						"type": "nvarchar"
					},
					{
						"name": "DocumentNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryTransactionCode",
						"type": "nvarchar"
					},
					{
						"name": "TaxInvoiceNumber",
						"type": "nvarchar"
					},
					{
						"name": "TaxInvoiceName",
						"type": "nvarchar"
					},
					{
						"name": "NPWP",
						"type": "nvarchar"
					},
					{
						"name": "OutletCreditDay",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReceiptNumber",
						"type": "nvarchar"
					},
					{
						"name": "CallingDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsDelete",
						"type": "bit"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[AccountTrialBalance]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IaaS_SALES')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_PaaS_ATB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_SALES_DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Development"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Site",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Period",
						"type": "nvarchar"
					},
					{
						"name": "CustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "CreditLimit",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "OpeningBalance",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "TotalOverdueAmount",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "OverdueAmount1to30Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "OverdueAmount31to60Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "OverdueAmountOver60Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "ARCreditOutstanding",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "ARTemporaryCreditOutstanding",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "ARCashOutstanding",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "ARInvoiceCreditDay",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipToNumber",
						"type": "nvarchar"
					},
					{
						"name": "CreditSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreditType",
						"type": "nvarchar"
					},
					{
						"name": "InvoiceNumber",
						"type": "nvarchar"
					},
					{
						"name": "InvoiceStatus",
						"type": "nvarchar"
					},
					{
						"name": "InvoiceAmount",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "LPCAmount",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "SettlementLocation",
						"type": "nvarchar"
					},
					{
						"name": "ARLocation",
						"type": "nvarchar"
					},
					{
						"name": "ARCollectorRoute",
						"type": "nvarchar"
					},
					{
						"name": "InvoiceDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ReceiptDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SubmissionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CalculatedDueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LastPaymentDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ReferenceNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PastDueFlag",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AgeDelivery",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AgeSubmission",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DaysToReceive",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DaysToSubmit",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DaysInAR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Current",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue1to7Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue8to14Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue15to21Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue22to30Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue31to60Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue61to90Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overdue91to120Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "OverdueOver120Days",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Unapplied",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "Overpayment",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "ProprietaryBadDebt",
						"type": "decimal",
						"precision": 13,
						"scale": 0
					},
					{
						"name": "DCM",
						"type": "nvarchar"
					},
					{
						"name": "GM",
						"type": "nvarchar"
					},
					{
						"name": "SM",
						"type": "nvarchar"
					},
					{
						"name": "MarketingLocation",
						"type": "nvarchar"
					},
					{
						"name": "ARResponsibilityCode",
						"type": "nvarchar"
					},
					{
						"name": "PKPFlag",
						"type": "nvarchar"
					},
					{
						"name": "DocumentNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryTransactionCode",
						"type": "nvarchar"
					},
					{
						"name": "TaxInvoiceNumber",
						"type": "nvarchar"
					},
					{
						"name": "TaxInvoiceName",
						"type": "nvarchar"
					},
					{
						"name": "NPWP",
						"type": "nvarchar"
					},
					{
						"name": "OutletCreditDay",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReceiptNumber",
						"type": "nvarchar"
					},
					{
						"name": "CallingDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IsDelete",
						"type": "bit"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[AccountTrialBalance]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_SALES_DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dev_Core')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_CORE_DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Development"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_CORE_DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dev_Core_Briefcase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_CORE_DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Development"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "[[dbo].[briefcase_header]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_CORE_DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dev_Core_Briefcase_detail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_CORE_DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Development"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "[[dbo].[briefcase_detail]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_CORE_DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dev_MasterData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_MASTERDATA_DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Development"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_MASTERDATA_DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dev_MasterData_CustomerAdditionals')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_MASTERDATA_DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Development"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerNumber",
						"type": "varchar"
					},
					{
						"name": "SuppressedDate",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "SuppressedCode",
						"type": "varchar"
					},
					{
						"name": "DistributionCenterFlag",
						"type": "varchar"
					},
					{
						"name": "SalesOfficeArea",
						"type": "varchar"
					},
					{
						"name": "CustomerCategoryCode",
						"type": "varchar"
					},
					{
						"name": "CustomerStatus",
						"type": "varchar"
					},
					{
						"name": "ClosedDate",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "SubClusterCode",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "WholeSalerPlatinum",
						"type": "varchar"
					},
					{
						"name": "MITPaket",
						"type": "varchar"
					},
					{
						"name": "PromoPaket",
						"type": "varchar"
					},
					{
						"name": "NPDPaket",
						"type": "varchar"
					},
					{
						"name": "DMSReserve1",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerSuppressions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_MASTERDATA_DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileInBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/File_in_idcbtap22')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eTaxFileSource",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Binary"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eTaxFileSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericAzureSQLDatabase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericAzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"Secret": {
							"value": "@dataset().secret",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"table": {
						"type": "string"
					},
					"secret": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericSqlServer_CCAIDWPRDB004')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GenericSqlServer_CCAIDWPRDB004",
					"type": "LinkedServiceReference",
					"parameters": {
						"secret": {
							"value": "@dataset().secret",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"secret": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SQL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GenericSqlServer_CCAIDWPRDB004')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PdfFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "eTaxFileSource",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Binary"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": "D:\\Dev\\Pdf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/eTaxFileSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Production_Core')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_CORE_PRODUCTION",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Production"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_CORE_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Production_MasterData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_MASTERDATA_PRODUCTION",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Production"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_MASTERDATA_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Production_MasterData_IaaS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IaaS_MASTERDATA_PRODUCTION",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IaaS_MASTERDATA_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Production_Report')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_REPORT_PRODUCTION",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Production/Report DB"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Site",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Number",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ArticleGroupingListId",
						"type": "nvarchar"
					},
					{
						"name": "BillToCustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "TaxClass",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "RegionCode",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "TelNumber",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Street",
						"type": "nvarchar"
					},
					{
						"name": "PrecinctId",
						"type": "nvarchar"
					},
					{
						"name": "Email",
						"type": "nvarchar"
					},
					{
						"name": "MarketTypeId",
						"type": "nvarchar"
					},
					{
						"name": "TradeChannelId",
						"type": "nvarchar"
					},
					{
						"name": "SubTradeChannelId",
						"type": "nvarchar"
					},
					{
						"name": "BusinessOwnerId",
						"type": "nvarchar"
					},
					{
						"name": "TradeNameId",
						"type": "nvarchar"
					},
					{
						"name": "CustomerTypeId",
						"type": "nvarchar"
					},
					{
						"name": "AccountGroupId",
						"type": "nvarchar"
					},
					{
						"name": "BusinessTypeId",
						"type": "nvarchar"
					},
					{
						"name": "OperationalRegionId",
						"type": "nvarchar"
					},
					{
						"name": "LicenseTypeId",
						"type": "nvarchar"
					},
					{
						"name": "LicenseNumber",
						"type": "nvarchar"
					},
					{
						"name": "AcsNumber",
						"type": "nvarchar"
					},
					{
						"name": "AtoNumber",
						"type": "nvarchar"
					},
					{
						"name": "WholesalerCustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "GlobalCustomerNumberId",
						"type": "nvarchar"
					},
					{
						"name": "HardStartTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "HardEndTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "SoftStartTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "SoftEndTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "ServicePolicyId",
						"type": "nvarchar"
					},
					{
						"name": "SalesPolicyId",
						"type": "nvarchar"
					},
					{
						"name": "SuppressionId",
						"type": "nvarchar"
					},
					{
						"name": "CreditBlock",
						"type": "bit"
					},
					{
						"name": "OrderBlockId",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryServiceCoordinatorId",
						"type": "nvarchar"
					},
					{
						"name": "PreferredOrderMethodId",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderRequiredId",
						"type": "nvarchar"
					},
					{
						"name": "SalesOfficeId",
						"type": "nvarchar"
					},
					{
						"name": "TermsOfPaymentId",
						"type": "nvarchar"
					},
					{
						"name": "SalesOrganisationId",
						"type": "nvarchar"
					},
					{
						"name": "DistributionChannelId",
						"type": "nvarchar"
					},
					{
						"name": "DivisionId",
						"type": "nvarchar"
					},
					{
						"name": "Latitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Longitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "PriceBookId",
						"type": "nvarchar"
					},
					{
						"name": "ConditionGroup1Id",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryDelayDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToCustomerName",
						"type": "nvarchar"
					},
					{
						"name": "PayerCustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "PayerCustomerName",
						"type": "nvarchar"
					},
					{
						"name": "BusinessOwnerEmail",
						"type": "nvarchar"
					},
					{
						"name": "RewardStatusId",
						"type": "nvarchar"
					},
					{
						"name": "RewardTierId",
						"type": "nvarchar"
					},
					{
						"name": "MobileNumber",
						"type": "nvarchar"
					},
					{
						"name": "FaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "StoreNumber",
						"type": "nvarchar"
					},
					{
						"name": "TaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "VatRegisteredNumber",
						"type": "nvarchar"
					},
					{
						"name": "EquipmentContractNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerProFormaPricingId",
						"type": "nvarchar"
					},
					{
						"name": "CreditCardSurcharge",
						"type": "nvarchar"
					},
					{
						"name": "StoreKeyNumber",
						"type": "nvarchar"
					},
					{
						"name": "HasPrintEAN",
						"type": "bit"
					},
					{
						"name": "IsWETExempt",
						"type": "bit"
					},
					{
						"name": "BlackCode",
						"type": "nvarchar"
					},
					{
						"name": "RedCode",
						"type": "nvarchar"
					},
					{
						"name": "L4Customer",
						"type": "nvarchar"
					},
					{
						"name": "L5Customer",
						"type": "nvarchar"
					},
					{
						"name": "SuppressionFlag",
						"type": "nvarchar"
					},
					{
						"name": "SalesFlag",
						"type": "nvarchar"
					},
					{
						"name": "L4CustomerName",
						"type": "nvarchar"
					},
					{
						"name": "L5CustomerName",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryTransactionCode",
						"type": "nvarchar"
					},
					{
						"name": "NationalOrOperation",
						"type": "nvarchar"
					},
					{
						"name": "ClusterFlagCode",
						"type": "nvarchar"
					},
					{
						"name": "LocationFlagDescription",
						"type": "nvarchar"
					},
					{
						"name": "SubClusterCode",
						"type": "nvarchar"
					},
					{
						"name": "SubClusterDescription",
						"type": "nvarchar"
					},
					{
						"name": "BankAccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CreditLimit",
						"type": "nvarchar"
					},
					{
						"name": "MaxOverdueGraceDay",
						"type": "nvarchar"
					},
					{
						"name": "SalesRoute",
						"type": "nvarchar"
					},
					{
						"name": "SM",
						"type": "nvarchar"
					},
					{
						"name": "GM",
						"type": "nvarchar"
					},
					{
						"name": "Area",
						"type": "nvarchar"
					},
					{
						"name": "MarketingMessages",
						"type": "nvarchar"
					},
					{
						"name": "LocationFlag",
						"type": "nvarchar"
					},
					{
						"name": "DSM",
						"type": "nvarchar"
					},
					{
						"name": "BU",
						"type": "nvarchar"
					},
					{
						"name": "Statloc",
						"type": "nvarchar"
					},
					{
						"name": "ClusterFlagDescription",
						"type": "nvarchar"
					},
					{
						"name": "DistCenter",
						"type": "nvarchar"
					},
					{
						"name": "IsDelete",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Production_Report_SAM_Customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_REPORT_PRODUCTION",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Production/Report DB"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Site",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Number",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ArticleGroupingListId",
						"type": "nvarchar"
					},
					{
						"name": "BillToCustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "TaxClass",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "RegionCode",
						"type": "nvarchar"
					},
					{
						"name": "PostalCode",
						"type": "nvarchar"
					},
					{
						"name": "TelNumber",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Street",
						"type": "nvarchar"
					},
					{
						"name": "PrecinctId",
						"type": "nvarchar"
					},
					{
						"name": "Email",
						"type": "nvarchar"
					},
					{
						"name": "MarketTypeId",
						"type": "nvarchar"
					},
					{
						"name": "TradeChannelId",
						"type": "nvarchar"
					},
					{
						"name": "SubTradeChannelId",
						"type": "nvarchar"
					},
					{
						"name": "BusinessOwnerId",
						"type": "nvarchar"
					},
					{
						"name": "TradeNameId",
						"type": "nvarchar"
					},
					{
						"name": "CustomerTypeId",
						"type": "nvarchar"
					},
					{
						"name": "AccountGroupId",
						"type": "nvarchar"
					},
					{
						"name": "BusinessTypeId",
						"type": "nvarchar"
					},
					{
						"name": "OperationalRegionId",
						"type": "nvarchar"
					},
					{
						"name": "LicenseTypeId",
						"type": "nvarchar"
					},
					{
						"name": "LicenseNumber",
						"type": "nvarchar"
					},
					{
						"name": "AcsNumber",
						"type": "nvarchar"
					},
					{
						"name": "AtoNumber",
						"type": "nvarchar"
					},
					{
						"name": "WholesalerCustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "GlobalCustomerNumberId",
						"type": "nvarchar"
					},
					{
						"name": "HardStartTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "HardEndTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "SoftStartTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "SoftEndTime",
						"type": "time",
						"scale": 7
					},
					{
						"name": "ServicePolicyId",
						"type": "nvarchar"
					},
					{
						"name": "SalesPolicyId",
						"type": "nvarchar"
					},
					{
						"name": "SuppressionId",
						"type": "nvarchar"
					},
					{
						"name": "CreditBlock",
						"type": "bit"
					},
					{
						"name": "OrderBlockId",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryServiceCoordinatorId",
						"type": "nvarchar"
					},
					{
						"name": "PreferredOrderMethodId",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderRequiredId",
						"type": "nvarchar"
					},
					{
						"name": "SalesOfficeId",
						"type": "nvarchar"
					},
					{
						"name": "TermsOfPaymentId",
						"type": "nvarchar"
					},
					{
						"name": "SalesOrganisationId",
						"type": "nvarchar"
					},
					{
						"name": "DistributionChannelId",
						"type": "nvarchar"
					},
					{
						"name": "DivisionId",
						"type": "nvarchar"
					},
					{
						"name": "Latitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Longitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "PriceBookId",
						"type": "nvarchar"
					},
					{
						"name": "ConditionGroup1Id",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryDelayDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToCustomerName",
						"type": "nvarchar"
					},
					{
						"name": "PayerCustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "PayerCustomerName",
						"type": "nvarchar"
					},
					{
						"name": "BusinessOwnerEmail",
						"type": "nvarchar"
					},
					{
						"name": "RewardStatusId",
						"type": "nvarchar"
					},
					{
						"name": "RewardTierId",
						"type": "nvarchar"
					},
					{
						"name": "MobileNumber",
						"type": "nvarchar"
					},
					{
						"name": "FaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "StoreNumber",
						"type": "nvarchar"
					},
					{
						"name": "TaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "VatRegisteredNumber",
						"type": "nvarchar"
					},
					{
						"name": "EquipmentContractNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerProFormaPricingId",
						"type": "nvarchar"
					},
					{
						"name": "CreditCardSurcharge",
						"type": "nvarchar"
					},
					{
						"name": "StoreKeyNumber",
						"type": "nvarchar"
					},
					{
						"name": "HasPrintEAN",
						"type": "bit"
					},
					{
						"name": "IsWETExempt",
						"type": "bit"
					},
					{
						"name": "BlackCode",
						"type": "nvarchar"
					},
					{
						"name": "RedCode",
						"type": "nvarchar"
					},
					{
						"name": "L4Customer",
						"type": "nvarchar"
					},
					{
						"name": "L5Customer",
						"type": "nvarchar"
					},
					{
						"name": "SuppressionFlag",
						"type": "nvarchar"
					},
					{
						"name": "SalesFlag",
						"type": "nvarchar"
					},
					{
						"name": "L4CustomerName",
						"type": "nvarchar"
					},
					{
						"name": "L5CustomerName",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryTransactionCode",
						"type": "nvarchar"
					},
					{
						"name": "NationalOrOperation",
						"type": "nvarchar"
					},
					{
						"name": "ClusterFlagCode",
						"type": "nvarchar"
					},
					{
						"name": "LocationFlagDescription",
						"type": "nvarchar"
					},
					{
						"name": "SubClusterCode",
						"type": "nvarchar"
					},
					{
						"name": "SubClusterDescription",
						"type": "nvarchar"
					},
					{
						"name": "BankAccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CreditLimit",
						"type": "nvarchar"
					},
					{
						"name": "MaxOverdueGraceDay",
						"type": "nvarchar"
					},
					{
						"name": "SalesRoute",
						"type": "nvarchar"
					},
					{
						"name": "SM",
						"type": "nvarchar"
					},
					{
						"name": "GM",
						"type": "nvarchar"
					},
					{
						"name": "Area",
						"type": "nvarchar"
					},
					{
						"name": "MarketingMessages",
						"type": "nvarchar"
					},
					{
						"name": "LocationFlag",
						"type": "nvarchar"
					},
					{
						"name": "DSM",
						"type": "nvarchar"
					},
					{
						"name": "BU",
						"type": "nvarchar"
					},
					{
						"name": "Statloc",
						"type": "nvarchar"
					},
					{
						"name": "ClusterFlagDescription",
						"type": "nvarchar"
					},
					{
						"name": "DistCenter",
						"type": "nvarchar"
					},
					{
						"name": "IsDelete",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SAM_Customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Production_Report_SAM_Users')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_REPORT_PRODUCTION",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Production/Report DB"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "UserId",
						"type": "uniqueidentifier"
					},
					{
						"name": "UserName",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "PrimaryPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "SecondaryPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "PaymentAccess",
						"type": "bit"
					},
					{
						"name": "EmailOptIn",
						"type": "bit"
					},
					{
						"name": "CurrentCustomerSite",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CurrentCustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "BDECustomerSite",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BDECustomerNumber",
						"type": "nvarchar"
					},
					{
						"name": "RouteSite",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SapUserName",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ExternalUserId",
						"type": "nvarchar"
					},
					{
						"name": "PinID",
						"type": "nvarchar"
					},
					{
						"name": "RoleId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Application",
						"type": "text"
					},
					{
						"name": "Status",
						"type": "bit"
					},
					{
						"name": "LocationCode",
						"type": "nvarchar"
					},
					{
						"name": "PersonnelNumber",
						"type": "nvarchar"
					},
					{
						"name": "SubLoc",
						"type": "nvarchar"
					},
					{
						"name": "PositionCode",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsDelete",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SAM_Users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Production_Report_SurveyTransaction')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_REPORT_PRODUCTION",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Site",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Guid",
						"type": "uniqueidentifier"
					},
					{
						"name": "Route",
						"type": "nvarchar"
					},
					{
						"name": "OutletNumber",
						"type": "nvarchar"
					},
					{
						"name": "WindowsId",
						"type": "nvarchar"
					},
					{
						"name": "SurveyId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SurveyDescription",
						"type": "nvarchar"
					},
					{
						"name": "StartSurveyDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EndSurveyDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Comment",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SurveyType",
						"type": "nvarchar"
					},
					{
						"name": "FlagTransaction",
						"type": "nvarchar"
					},
					{
						"name": "TotalScore",
						"type": "float",
						"precision": 15
					},
					{
						"name": "CallHistoryGuid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ReasonCode",
						"type": "nvarchar"
					},
					{
						"name": "ReasonDescription",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SAM_SurveyTransaction_BAK"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_REPORT_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Production_Sales_IaaS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IaaS_SALES_PRODUCTION",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Production"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IaaS_SALES_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/QA_CDE_QAQuestion')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_CDE_QA",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "QA"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Site",
						"type": "nvarchar"
					},
					{
						"name": "EquipmentNumber",
						"type": "nvarchar"
					},
					{
						"name": "SectionID",
						"type": "nvarchar"
					},
					{
						"name": "MeasuringPoint",
						"type": "nvarchar"
					},
					{
						"name": "QuestionText",
						"type": "nvarchar"
					},
					{
						"name": "ProductID",
						"type": "nvarchar"
					},
					{
						"name": "Sequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AnswerGroup",
						"type": "nvarchar"
					},
					{
						"name": "UnitOfMeasure",
						"type": "nvarchar"
					},
					{
						"name": "MaxValue",
						"type": "nvarchar"
					},
					{
						"name": "MinValue",
						"type": "nvarchar"
					},
					{
						"name": "DataType",
						"type": "varchar"
					},
					{
						"name": "QuestCode",
						"type": "varchar"
					},
					{
						"name": "IsActive",
						"type": "bit"
					},
					{
						"name": "CreatedBy",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "ModifiedBy",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetimeoffset",
						"scale": 7
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[QAQuestion_10072019]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_CDE_QA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/QA_CORE_ROLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_CORE_DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "QA"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PK_MGroupMenu_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GroupMenuName",
						"type": "varchar"
					},
					{
						"name": "GroupMenuDesciption",
						"type": "varchar"
					},
					{
						"name": "Active",
						"type": "bit"
					},
					{
						"name": "type",
						"type": "varchar"
					},
					{
						"name": "Application",
						"type": "varchar"
					},
					{
						"name": "CreatedBy",
						"type": "varchar"
					},
					{
						"name": "LastUpdateBy",
						"type": "varchar"
					},
					{
						"name": "ApprovedBy",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ApprovedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[MGroupMenu]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_CORE_DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/QA_MasterData_CustomerAdditionals')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "IR2_MASTERDATA_QA",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "QA"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerNumber",
						"type": "varchar"
					},
					{
						"name": "SuppressedDate",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "SuppressedCode",
						"type": "varchar"
					},
					{
						"name": "DistributionCenterFlag",
						"type": "varchar"
					},
					{
						"name": "SalesOfficeArea",
						"type": "varchar"
					},
					{
						"name": "CustomerCategoryCode",
						"type": "varchar"
					},
					{
						"name": "CustomerStatus",
						"type": "varchar"
					},
					{
						"name": "ClosedDate",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "SubClusterCode",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetimeoffset",
						"scale": 7
					},
					{
						"name": "WholeSalerPlatinum",
						"type": "varchar"
					},
					{
						"name": "MITPaket",
						"type": "varchar"
					},
					{
						"name": "PromoPaket",
						"type": "varchar"
					},
					{
						"name": "NPDPaket",
						"type": "varchar"
					},
					{
						"name": "DMSReserve1",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerAdditionals"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2_MASTERDATA_QA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_DMS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SFTP_DMS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SFTP_DMS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_HR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SFTP_HR",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SFTP"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SFTP_HR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZipFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Blob Storage"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().deliminator",
						"type": "Expression"
					},
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ZipInSFTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "CSV in ZIP in SFTP",
				"linkedServiceName": {
					"referenceName": "SFTP_DMS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					},
					"column_deliminator": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SFTP"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().column_deliminator",
						"type": "Expression"
					},
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\"",
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SFTP_DMS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AKV_IR2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AKV_IR2_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AKV_IR2_PRD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AKV_IR2_PRD_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureBlobStorage1_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AKV_IR2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CoreFunction')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "https://corefunction.azurewebsites.net",
					"functionKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2",
							"type": "LinkedServiceReference"
						},
						"secretName": "core-function-host-key"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AKV_IR2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericAzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"Secret": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2_PRD",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('GenericAzureSqlDatabase_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						},
						"secretVersion": ""
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AKV_IR2_PRD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenericSqlServer_CCAIDWPRDB004')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"secret": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2_PRD",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('GenericSqlServer_CCAIDWPRDB004_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime-CCAIDWPRDDB004",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime-CCAIDWPRDDB004')]",
				"[concat(variables('factoryId'), '/linkedServices/AKV_IR2_PRD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IDCBTIN22_Root')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "FTP Folder IDCBTIN22",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('IDCBTIN22_Root_properties_typeProperties_host')]",
					"userId": "[parameters('IDCBTIN22_Root_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('IDCBTIN22_Root_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime-IaaS-ccaidwdevdb001",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime-IaaS-ccaidwdevdb001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IDCBTIN22_Root_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "IDCBTIN22_Root_PRODUCTION",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('IDCBTIN22_Root_PRODUCTION_properties_typeProperties_host')]",
					"userId": "[parameters('IDCBTIN22_Root_PRODUCTION_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('IDCBTIN22_Root_PRODUCTION_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime-CCAIDWPRDDB004",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime-CCAIDWPRDDB004')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR2KeyVault_LinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('IR2KeyVault_LinkedService_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR2_CDE_DEV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IR2_CDE_DEV_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR2_CDE_QA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IR2_CDE_QA_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR2_CORE_DEV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IR2_CORE_DEV_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR2_CORE_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IR2_CORE_PRODUCTION_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR2_CORE_QA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IR2_CORE_QA_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR2_MASTERDATA_DEV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "IR2KeyVault_LinkedService",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('IR2_MASTERDATA_DEV_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/IR2KeyVault_LinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR2_MASTERDATA_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IR2_MASTERDATA_PRODUCTION_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR2_MASTERDATA_QA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IR2_MASTERDATA_QA_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR2_REPORT_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IR2_REPORT_PRODUCTION_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR2_SALES_DEV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('IR2_SALES_DEV_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IaaS_MASTERDATA_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('IaaS_MASTERDATA_PRODUCTION_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime-CCAIDWPRDDB004",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime-CCAIDWPRDDB004')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IaaS_SALES')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('IaaS_SALES_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime-IaaS-ccaidwdevdb001",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime-IaaS-ccaidwdevdb001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IaaS_SALES_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('IaaS_SALES_PRODUCTION_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime-CCAIDWPRDDB004",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime-CCAIDWPRDDB004')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PaaS_REDCoaching_Production')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('PaaS_REDCoaching_Production_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_DMS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('SFTP_DMS_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('SFTP_DMS_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2",
							"type": "LinkedServiceReference"
						},
						"secretName": "SFTP-DMS"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime-CCAIDWPRDDB004",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime-CCAIDWPRDDB004')]",
				"[concat(variables('factoryId'), '/linkedServices/AKV_IR2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_HR')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('SFTP_HR_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('SFTP_HR_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2",
							"type": "LinkedServiceReference"
						},
						"secretName": "SFTP-HR-DEV"
					}
				},
				"connectVia": {
					"referenceName": "IDCBTAP22",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IDCBTAP22')]",
				"[concat(variables('factoryId'), '/linkedServices/AKV_IR2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTaxFileSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('eTaxFileSource_properties_typeProperties_host')]",
					"userId": "[parameters('eTaxFileSource_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_IR2",
							"type": "LinkedServiceReference"
						},
						"secretName": "eTax-Password",
						"secretVersion": ""
					}
				},
				"connectVia": {
					"referenceName": "IDCBTAP22",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IDCBTAP22')]",
				"[concat(variables('factoryId'), '/linkedServices/AKV_IR2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CORE_DeleteNotification')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CORE_DeleteNotification",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-11-01T19:00:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CORE_DeleteNotification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily Run Trigger - 1 am _ 1 pm')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Integration Run SP",
							"type": "PipelineReference"
						},
						"parameters": {
							"triggerGroup": "[parameters('Daily Run Trigger - 1 am _ 1 pm_properties_Integration Run SP_parameters_triggerGroup')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-01-08T07:59:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								18,
								6
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Integration Run SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily Run Trigger Master Data - 1 am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Integration Copy Data",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerGroup": "[parameters('Daily Run Trigger Master Data - 1 am_properties_Integration Copy Data_parameters_TriggerGroup')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-01-26T05:11:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								18
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Integration Copy Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily Run Trigger Master Data - 3 am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Integration Copy Data",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerGroup": "[parameters('Daily Run Trigger Master Data - 3 am_properties_Integration Copy Data_parameters_TriggerGroup')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-01-15T11:48:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								20
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Integration Copy Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily Run Trigger Trx - 1 am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy to Report Database",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SAM Users",
							"type": "PipelineReference"
						},
						"parameters": {
							"SyncDataFrom": "[parameters('Daily Run Trigger Trx - 1 am_properties_SAM Users_parameters_SyncDataFrom')]",
							"SyncDataTo": "[parameters('Daily Run Trigger Trx - 1 am_properties_SAM Users_parameters_SyncDataTo')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "SAM Survey Transaction All",
							"type": "PipelineReference"
						},
						"parameters": {
							"SyncDataFrom": "[parameters('Daily Run Trigger Trx - 1 am_properties_SAM Survey Transaction All_parameters_SyncDataFrom')]",
							"SyncDataTo": "[parameters('Daily Run Trigger Trx - 1 am_properties_SAM Survey Transaction All_parameters_SyncDataTo')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "Integration Copy Data",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerGroup": "[parameters('Daily Run Trigger Trx - 1 am_properties_Integration Copy Data_parameters_TriggerGroup')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "Integration Run SP",
							"type": "PipelineReference"
						},
						"parameters": {
							"triggerGroup": "[parameters('Daily Run Trigger Trx - 1 am_properties_Integration Run SP_parameters_triggerGroup')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-08-21T09:10:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								18
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SAM Users')]",
				"[concat(variables('factoryId'), '/pipelines/SAM Survey Transaction All')]",
				"[concat(variables('factoryId'), '/pipelines/Integration Copy Data')]",
				"[concat(variables('factoryId'), '/pipelines/Integration Run SP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily Run Trigger Trx - 2 am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Integration Copy Data",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerGroup": "[parameters('Daily Run Trigger Trx - 2 am_properties_Integration Copy Data_parameters_TriggerGroup')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-01-13T09:33:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								19
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Integration Copy Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily Run Trigger Trx - 3 am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Integration Copy Data",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerGroup": "[parameters('Daily Run Trigger Trx - 3 am_properties_Integration Copy Data_parameters_TriggerGroup')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-01-26T05:14:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								20
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Integration Copy Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily Run Trigger Trx - 4 am')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Integration Copy Data",
							"type": "PipelineReference"
						},
						"parameters": {
							"TriggerGroup": "[parameters('Daily Run Trigger Trx - 4 am_properties_Integration Copy Data_parameters_TriggerGroup')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-01-26T05:16:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								21
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Integration Copy Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete Old Data in CCASitecore_Custom')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "DeleteOldLogSyncs_CCASitecore_Custom",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Delete CallHistory By PinId",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-07-31T08:57:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0,
								15,
								30,
								45
							],
							"hours": [
								18,
								19,
								20,
								21
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DeleteOldLogSyncs_CCASitecore_Custom')]",
				"[concat(variables('factoryId'), '/pipelines/Delete CallHistory By PinId')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UpdateInvalidStatus_DataSubmitStaging')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "UpdateInvalidStatus_DataSubmitStaging",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2019-08-23T07:56:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/UpdateInvalidStatus_DataSubmitStaging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eTax')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "eTax 1 File Management",
							"type": "PipelineReference"
						},
						"parameters": {
							"directory": "[parameters('eTax_properties_eTax 1 File Management_parameters_directory')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "eTax 3 Send Email",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourceDirectory": "[parameters('eTax_properties_eTax 3 Send Email_parameters_sourceDirectory')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "eTax 4 Read Status",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourceDirectory": "[parameters('eTax_properties_eTax 4 Read Status_parameters_sourceDirectory')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 10,
						"startTime": "2019-12-10T05:16:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/eTax 1 File Management')]",
				"[concat(variables('factoryId'), '/pipelines/eTax 3 Send Email')]",
				"[concat(variables('factoryId'), '/pipelines/eTax 4 Read Status')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IDCBTAP22')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "on premise IDCBTAP22",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime-CCAIDWPRDDB004')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "CCAIDWPRDDB004",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime-IaaS-ccaidwdevdb001')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "IntegrationRuntime",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime-SSIS-CCAIDWPRDDB004')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"description": "CCAIDWPRDDB004",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"nodeSize": "Standard_D2_v3",
						"numberOfNodes": 1,
						"maxParallelExecutionsPerNode": 2
					},
					"ssisProperties": {
						"catalogInfo": {
							"catalogServerEndpoint": "[parameters('integrationRuntime-SSIS-CCAIDWPRDDB004_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint')]",
							"catalogAdminUserName": "[parameters('integrationRuntime-SSIS-CCAIDWPRDDB004_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName')]",
							"catalogAdminPassword": {
								"type": "SecureString",
								"value": "[parameters('integrationRuntime-SSIS-CCAIDWPRDDB004_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword')]"
							},
							"catalogPricingTier": "S0"
						},
						"edition": "Standard",
						"licenseType": "LicenseIncluded"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowGDMPhotoTaking')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference"
							},
							"name": "SurveyTransaction",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference"
							},
							"name": "Customers",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tSite as integer,\n\t\tSurveyTransactionId as long,\n\t\tApplicationSourceId as integer,\n\t\tGuid as string,\n\t\tSurveyId as integer,\n\t\tSurveyDescription as string,\n\t\tStartSurveyDateTime as string,\n\t\tEndSurveyDateTime as string,\n\t\tComment as string,\n\t\tCreatedDate as string,\n\t\tModifiedDate as string,\n\t\tSurveyType as string,\n\t\tFlagTransaction as string,\n\t\tTotalScore as double,\n\t\tCallHistoryGuid as string,\n\t\tReasonCode as string,\n\t\tReasonDescription as string,\n\t\tSurveyorId as integer,\n\t\tRespondentId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'Select * from VW_GDMPhotoTaking\\n',\n\tformat: 'query') ~> SurveyTransaction\nsource(output(\n\t\tNumber as string,\n\t\tName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'Select Number, Name from Customers',\n\tformat: 'query') ~> Customers\nSurveyTransaction sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy SQL to FTP DMS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy PaaS to PaaS w Truncate",
						"description": "Truncate before copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "GenericAzureSQLDatabase",
								"type": "DatasetReference",
								"parameters": {
									"table": {
										"value": "@pipeline().parameters.sourceTable",
										"type": "Expression"
									},
									"secret": {
										"value": "@pipeline().parameters.sourceSecret",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ZipInSFTP",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@pipeline().parameters.targetFolder",
										"type": "Expression"
									},
									"filename": {
										"value": "@pipeline().parameters.targetFilename",
										"type": "Expression"
									},
									"column_deliminator": {
										"value": "@pipeline().parameters.deliminator",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"sourceSecret": {
						"type": "string"
					},
					"sourceTable": {
						"type": "string"
					},
					"targetFolder": {
						"type": "string"
					},
					"targetFilename": {
						"type": "string"
					},
					"deliminator": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Production"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/GenericAzureSQLDatabase')]",
				"[concat(variables('factoryId'), '/datasets/ZipInSFTP')]"
			]
		}
	]
}